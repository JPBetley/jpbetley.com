{"db":[{"meta":{"exported_on":1541177921887,"version":"004"},"data":{"client_trusted_domains":[],"apps":[],"posts":[{"id":2,"uuid":"5f4a8cff-bcda-4af6-b25c-a31afa84a784","title":"The Great Facade","slug":"the-great-facade","markdown":"Last time, I wrote about the new PHP mocking framework, [AspectMock](/blog/2013/07/24/are-you-mocking-me), which added the ability to test static methods, something that was previously untestable. Also, recently several members of the PHP community got into a heated discussion about the use of statics in the popular PHP framwork Laravel. So I decided to add my two cents to the discussion and post about the **actual** use of statics in Laravel.\n\nI know what you’re saying. “I thought you just told us static methods are hard for testing? Why not use AspectMock if you’re using static methods?”. Well, there is actually a good answer to what Laravel is doing and why it provides static methods to developers.\n \nFacades. No, it’s not pronounced fay-kades, it’s fuh-sahds. Facade is an object-oriented pattern popularized by the [Gang of Four](http://en.wikipedia.org/wiki/Design_Patterns) that provides an interface to a large body of code, such as a class library. This design pattern is incredible powerful, and is used extensively in the popular PHP framework, [Laravel](http://laravel.com). By leveraging the Facade Pattern, Taylor Otwell, the framework’s creator, provided developers the ability to use static methods of library classes for an “expressive, elegant syntax”.\n\n \n Well, that’s why the facade pattern is being used here! In laravel, you’re not calling a static method of a library class. Instead, the method call is for a Facade, which forwards the call to the instantiated library class. This allows us to keep both the elegance of the syntax and keep our code testable. Let me show you how that works.\n\nThe following code is the main power behind Laravel's powerful facade structure. It is a PHP magic method that will intercept any static method that is not already defined in the class. It first grabs the underlying class library that has been instantiated in the IOC container or creates an instance of it to use. Then it sends the method called on the facade to the instance to handle. \n```\n<?php\n/**\n* Handle dynamic, static calls to the object.\n*\n* @param  string  $method\n* @param  array   $args\n* @return mixed\n*/\npublic static function __callStatic($method, $args)\n{\n    $instance = static::resolveFacadeInstance(static::getFacadeAccessor());\n    \n    switch (count($args))\n    {\n        case 0:\n            return $instance->$method();\n        \n        case 1:\n            return $instance->$method($args[0]);\n        \n        case 2:\n            return $instance->$method($args[0], $args[1]);\n        \n        case 3:\n            return $instance->$method($args[0], $args[1], $args[2]);\n        \n        case 4:\n            return $instance->$method($args[0], $args[1], $args[2], $args[3]);\n        \n        default:\n            return call_user_func_array(array($instance, $method), $args);\n    }\n}\n```\n\n\nNow, let that sink in. It works with a real instantiated object, and isn't just flinging static method calls around all over the place. All of the provided laravel libraries operate as stateful instances of classes, which is not immediately aparent due to the syntax most commonly used in laravel applications. \n\nSo next time you `Mail::send()`, remember that you are actually in fact calling `Illuminate\\Mail\\Mailer`'s send method on an object in the IOC container.\n\n####Update: 12/12/2013\nTaylor has just included a doc page for Laravel's use of Facades on the [Laravel Website](http://laravel.com/docs/facades). I recommend you check it out as it includes a lot of great information about them, including usage, creating your own Facades, mocking Facades for testing, and a reference list of Laravel's built in Facade classes and which implementations they refer to.","html":"<p>Last time, I wrote about the new PHP mocking framework, <a href=\"/blog/2013/07/24/are-you-mocking-me\">AspectMock</a>, which added the ability to test static methods, something that was previously untestable. Also, recently several members of the PHP community got into a heated discussion about the use of statics in the popular PHP framwork Laravel. So I decided to add my two cents to the discussion and post about the <strong>actual</strong> use of statics in Laravel.</p>\n\n<p>I know what you’re saying. “I thought you just told us static methods are hard for testing? Why not use AspectMock if you’re using static methods?”. Well, there is actually a good answer to what Laravel is doing and why it provides static methods to developers.</p>\n\n<p>Facades. No, it’s not pronounced fay-kades, it’s fuh-sahds. Facade is an object-oriented pattern popularized by the <a href=\"http://en.wikipedia.org/wiki/Design_Patterns\">Gang of Four</a> that provides an interface to a large body of code, such as a class library. This design pattern is incredible powerful, and is used extensively in the popular PHP framework, <a href=\"http://laravel.com\">Laravel</a>. By leveraging the Facade Pattern, Taylor Otwell, the framework’s creator, provided developers the ability to use static methods of library classes for an “expressive, elegant syntax”.</p>\n\n<p>Well, that’s why the facade pattern is being used here! In laravel, you’re not calling a static method of a library class. Instead, the method call is for a Facade, which forwards the call to the instantiated library class. This allows us to keep both the elegance of the syntax and keep our code testable. Let me show you how that works.</p>\n\n<p>The following code is the main power behind Laravel's powerful facade structure. It is a PHP magic method that will intercept any static method that is not already defined in the class. It first grabs the underlying class library that has been instantiated in the IOC container or creates an instance of it to use. Then it sends the method called on the facade to the instance to handle.  </p>\n\n<pre><code>&lt;?php  \n/**\n* Handle dynamic, static calls to the object.\n*\n* @param  string  $method\n* @param  array   $args\n* @return mixed\n*/\npublic static function __callStatic($method, $args)  \n{\n    $instance = static::resolveFacadeInstance(static::getFacadeAccessor());\n\n    switch (count($args))\n    {\n        case 0:\n            return $instance-&gt;$method();\n\n        case 1:\n            return $instance-&gt;$method($args[0]);\n\n        case 2:\n            return $instance-&gt;$method($args[0], $args[1]);\n\n        case 3:\n            return $instance-&gt;$method($args[0], $args[1], $args[2]);\n\n        case 4:\n            return $instance-&gt;$method($args[0], $args[1], $args[2], $args[3]);\n\n        default:\n            return call_user_func_array(array($instance, $method), $args);\n    }\n}\n</code></pre>\n\n<p>Now, let that sink in. It works with a real instantiated object, and isn't just flinging static method calls around all over the place. All of the provided laravel libraries operate as stateful instances of classes, which is not immediately aparent due to the syntax most commonly used in laravel applications. </p>\n\n<p>So next time you <code>Mail::send()</code>, remember that you are actually in fact calling <code>Illuminate\\Mail\\Mailer</code>'s send method on an object in the IOC container.</p>\n\n<h4 id=\"update12122013\">Update: 12/12/2013</h4>\n\n<p>Taylor has just included a doc page for Laravel's use of Facades on the <a href=\"http://laravel.com/docs/facades\">Laravel Website</a>. I recommend you check it out as it includes a lot of great information about them, including usage, creating your own Facades, mocking Facades for testing, and a reference list of Laravel's built in Facade classes and which implementations they refer to.</p>","image":null,"featured":false,"page":false,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2013-12-10T23:45:45.000Z","created_by":1,"updated_at":"2014-01-03T16:32:19.000Z","updated_by":1,"published_at":"2013-12-11T00:26:53.000Z","published_by":1},{"id":3,"uuid":"106ebf21-4c0b-4819-b795-0cc4e71a80ea","title":"Are You Mocking Me?","slug":"are-you-mocking-me","markdown":"Mocking libraries help developers easily test applications by providing better ways to ensure isolation. Today, I'll introduce you to a new and unique approach to mocking in PHP, AspectMock.\n\nAs PHP developers, we have had a long-standing issue of writing untested code. Some of that had to do with the language itself not really being designed to be testable. I mean, the dynamic languages of today like Ruby and Javascript allow you to stub static methods and redefine class methods at runtime. Some may argue that writing things like static methods are bad practice and make testability harder, but that is not the purpose of this article. (I'll have more on that topic later.)\n\nWith the advent of testing in PHP, many frameworks have been created to allow developers to test their code. Our arguable De-Facto standard unit testing framework is PHPUnit. Many use Codeception for BDD-style testing. And for mocking objects, the most vital link in the chain in my opinion, I prefer Mockery. Mocking objects allows us to easily keep isolation in our tests, so it is vital if we wish to write thorough tests. But those issues I brought up earlier of not being able to stub static methods, etc. are still an issue with PHP testing. Until Now.\n \nIntroducing [AspectMock](https://github.com/Codeception/AspectMock), a new mocking framework from the wonderful people over at Codeception. It uses the Go-AOP library to leverage Aspect-Oriented Programming to bring all of the capabilities that other dynamic languages provide to testing into the PHP world. If you want to know more about AOP and the GO framework, there is a great article over at [NetTuts](http://net.tutsplus.com/tutorials/php/aspect-oriented-programming-in-php-with-go/). It’s probably one of the most interesting things I’ve learned in the past few years, although I have more experience with Java's AspectJ than any PHP library.\n \nNow, you came to see how this thing actually works, didn’t you? Good, let’s write some code.\n```\n<?php\nuse AspectMock\\Test as test;\n\nclass Foo {\n\n    static function simpleStatic() {\n        return 'bees?!';\n    }\n} \n\nclass SimpleTest extends \\PHPUnit_Framework_Testcase {\n\n    protected function tearDown() {\n        test::clean(); // removes all registered test doubles\n    }\n\n    public function testStaticMethod() {\n        $this->assertEquals('bees?!', Foo::simpleStatic());\n        $mock = test::dummy('Foo', ['simpleStatic' => 'bar']);\n        $this->assertEquals('bar', Foo::simpleStatic());\n        $mock->verifyInvoked('simpleStatic');\n    }\t\t\t\n}\n```\n\nAs you can see, it's a simple test for a static method call. This may seem trivial, but it is immensly powerful in testing some of today's frameworks. For example, imagine the level of testing that is now available for Laravel's Eloquent Models, which have proven difficult to mock. The possibilities are endless.\n\nAt the end of the day, AspectMock is a very innovative mocking framework in the PHP world. It uses AOP to do things previously impossible for the language in the name of testing. I would definitely keep an eye on this project and use it every now and then. Word of warning however, it is still in early beta and many have reported problems (including myself), so don't use it in anything more than a fun pet project for the time being.","html":"<p>Mocking libraries help developers easily test applications by providing better ways to ensure isolation. Today, I'll introduce you to a new and unique approach to mocking in PHP, AspectMock.</p>\n\n<p>As PHP developers, we have had a long-standing issue of writing untested code. Some of that had to do with the language itself not really being designed to be testable. I mean, the dynamic languages of today like Ruby and Javascript allow you to stub static methods and redefine class methods at runtime. Some may argue that writing things like static methods are bad practice and make testability harder, but that is not the purpose of this article. (I'll have more on that topic later.)</p>\n\n<p>With the advent of testing in PHP, many frameworks have been created to allow developers to test their code. Our arguable De-Facto standard unit testing framework is PHPUnit. Many use Codeception for BDD-style testing. And for mocking objects, the most vital link in the chain in my opinion, I prefer Mockery. Mocking objects allows us to easily keep isolation in our tests, so it is vital if we wish to write thorough tests. But those issues I brought up earlier of not being able to stub static methods, etc. are still an issue with PHP testing. Until Now.</p>\n\n<p>Introducing <a href=\"https://github.com/Codeception/AspectMock\">AspectMock</a>, a new mocking framework from the wonderful people over at Codeception. It uses the Go-AOP library to leverage Aspect-Oriented Programming to bring all of the capabilities that other dynamic languages provide to testing into the PHP world. If you want to know more about AOP and the GO framework, there is a great article over at <a href=\"http://net.tutsplus.com/tutorials/php/aspect-oriented-programming-in-php-with-go/\">NetTuts</a>. It’s probably one of the most interesting things I’ve learned in the past few years, although I have more experience with Java's AspectJ than any PHP library.</p>\n\n<p>Now, you came to see how this thing actually works, didn’t you? Good, let’s write some code.  </p>\n\n<pre><code>&lt;?php  \nuse AspectMock\\Test as test;\n\nclass Foo {\n\n    static function simpleStatic() {\n        return 'bees?!';\n    }\n} \n\nclass SimpleTest extends \\PHPUnit_Framework_Testcase {\n\n    protected function tearDown() {\n        test::clean(); // removes all registered test doubles\n    }\n\n    public function testStaticMethod() {\n        $this-&gt;assertEquals('bees?!', Foo::simpleStatic());\n        $mock = test::dummy('Foo', ['simpleStatic' =&gt; 'bar']);\n        $this-&gt;assertEquals('bar', Foo::simpleStatic());\n        $mock-&gt;verifyInvoked('simpleStatic');\n    }            \n}\n</code></pre>\n\n<p>As you can see, it's a simple test for a static method call. This may seem trivial, but it is immensly powerful in testing some of today's frameworks. For example, imagine the level of testing that is now available for Laravel's Eloquent Models, which have proven difficult to mock. The possibilities are endless.</p>\n\n<p>At the end of the day, AspectMock is a very innovative mocking framework in the PHP world. It uses AOP to do things previously impossible for the language in the name of testing. I would definitely keep an eye on this project and use it every now and then. Word of warning however, it is still in early beta and many have reported problems (including myself), so don't use it in anything more than a fun pet project for the time being.</p>","image":null,"featured":false,"page":false,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2013-12-11T00:07:50.000Z","created_by":1,"updated_at":"2014-01-03T16:28:56.000Z","updated_by":1,"published_at":"2013-12-11T00:26:42.000Z","published_by":1},{"id":4,"uuid":"9a6b776d-27d8-425c-a3dd-52a9dc7f4077","title":"Unit Testing Revelation","slug":"unit-testing-revelation","markdown":"I’ve been doing application development for several years now. Through most of that experience and during my schooling, I never quite understood how and what to test, and more so, how to do test **well**. At one point, I decided that I needed to learn more about testing methodology in order to better understand how to test better. What I learned helped me change my views on testing as a whole and helped me become not just a better developer, but a better software architect.\n\nWhenever I tried to write unit tests, I always felt that they were inadequate and that they weren’t testing the right things. I also kept finding myself having to include several dependencies into the equation, which didn’t help testing, and definitely compromised the isolation of my unit, which is the whole idea behind unit testing in the first place. When I found [this article by Martin Fowler](http://martinfowler.com/articles/mocksArentStubs.html), I had my big “AHA” moment in testing: the difference between state and behavior testing.\n\n#State vs. Behavior Testing\nNot all unit tests are created equal. Both styles of testing accomplish the same goal, ensuring that the tested unit of the application performs it’s operations correctly. The difference is how these methodologies accomplish said goal.\n\n##State Verification\nLet’s start with the classical style or state-driven testing first.\n```\n// Adapted from Martin Fowler\n[TestClass]\npublic class OrderStateTester \n{\n    private static String TALISKER = \"Talisker\";\n    private static String HIGHLAND_PARK = \"Highland Park\";\n    private Warehouse warehouse = new WarehouseImpl();\n    \n    [TestInitialize]\n    protected void setUp() \n    {\n        warehouse.add(TALISKER, 50);\n        warehouse.add(HIGHLAND_PARK, 25);\n    }\n    \n    [TestMethod]\n    public void testOrderIsFilledIfEnoughInWarehouse() \n    {\n        Order order = new Order(TALISKER, 50);\n        order.fill(warehouse);\n        Assert.IsTrue(order.isFilled());\n        Assert.Equals(0, warehouse.getInventory(TALISKER));\n    }\n    \n    [TestMethod]\n    public void testOrderDoesNotRemoveIfNotEnough() \n    {\n        Order order = new Order(TALISKER, 51);\n        order.fill(warehouse);\n        Assert.IsFalse(order.isFilled());\n        Assert.Equals(50, warehouse.getInventory(TALISKER));\n    }\n}\n```\n    \nHere we see a simple unit test following the model of Arrange, Act, Assert. This test covers the ability for an order to be filled from the stock of a warehouse, failing if no inventory is available. Each test starts by Arranging the players in the operation. The Order is created with the specified warehouse and inventory number requested. Then the test performs it’s Act phase, which attempts to fill the order. Then are two tests Assert if the order was filled, and that the warehouse had its stock removed according to the number requested by the order.\n\nIn this case, there are two things of note. First, we are using an actual implementation of a `Warehouse` to perform some of our actions. That is because in order to test the `Order.fill()` method, a `Warehouse` object must be passed as a parameter. Second, is how we verify our test success in the Assert phase. We verify the final state of our application after the operations have been fulfilled. This **state verification** is what defines the classical style of unit testing.\n\n##Behavior Verification\nNow let’s test the same functionality using the mockist style of testing.\n```\n[TestClass]\npublic class OrderBehaviorTest\n{\n    private static String TALISKER = \"Talisker\";\n    \n    [TestMethod]\n    public void testFillingRemovesInventory()\n    {\n        // Arrange\n        Order order = new Order(TALISKER, 50);\n        var mock = new Mock<Warehouse>();\n        mock.Setup(x => x.hasInventory()).Returns(true);\n        mock.Setup(x => x.remove(TALISKER, 50));\n        \n        // Act\n        order.fill(mock.Object);\n        \n        // Assert\n        mock.Verify();\n        Assert.IsTrue(order.isFilled());\n    }\n    \n    [TestMethod]\n    public void testFillingFails()\n    {\n        // Arrange\n        Order order = new Order(TALISKER, 51);\n        var mock = new Mock<Warehouse>();\n        mock.Setup(x => x.hasInventory()).Returns(false);\n        \n        // Act\n        order.fill(mock.Object);\n        \n        // Assert\n        Assert.IsFalse(order.isFilled());\n    }\n}\n```\n    \nHere, we can see that we are verifying the same operation, the filling of an order. However, how we achieve that is much different. This methodology uses mock objects in place of actual implementations for the classes that we are not explicitly testing. This helps keep our unit test focused on that specific unit, isolating it from other parts of our system that should be testing independently.\n\nFor our mock objects, which have been created by the [Moq Framework](http://www.moqthis.com/), we setup the actions that we expect to be called during our Act phase and how those actions should respond. Notice that because we verify the behavior and not the state of the warehouse, we don’t need to worry about any logic correctly dictating whether or not our `Warehouse.hasInventory()` method will return the correct value. We explicitly state what result occurs. We can even specify the expected parameters for these mocked method calls, so that if `Order.fill()` incorrectly passes values, our test will know. (Check the documentation for your chosen mocking library to find out how explicit you can be with constraining the allowed behavior).\n\n#In Conclusion\nI’ve found that understanding this fundamental difference in testing styles has helped me in thoroughly testing my applications. Some people strictly adhere to one of the two methodologies, but I find that using a combination of both to fit my needs quite well. For small applications, if it helps me test quicker, I’ll write a classical test. However, most of the time I usually have some mocking library in use to isolate my unit testing. But even when I use mocking for my unit tests, I still sometime write integration tests that test multiple parts of the system at once, classical state tests are the way to go. In the end, it really just comes down to what problem you are trying to solve, and which tools best equip you to solve them.","html":"<p>I’ve been doing application development for several years now. Through most of that experience and during my schooling, I never quite understood how and what to test, and more so, how to do test <strong>well</strong>. At one point, I decided that I needed to learn more about testing methodology in order to better understand how to test better. What I learned helped me change my views on testing as a whole and helped me become not just a better developer, but a better software architect.</p>\n\n<p>Whenever I tried to write unit tests, I always felt that they were inadequate and that they weren’t testing the right things. I also kept finding myself having to include several dependencies into the equation, which didn’t help testing, and definitely compromised the isolation of my unit, which is the whole idea behind unit testing in the first place. When I found <a href=\"http://martinfowler.com/articles/mocksArentStubs.html\">this article by Martin Fowler</a>, I had my big “AHA” moment in testing: the difference between state and behavior testing.</p>\n\n<h1 id=\"statevsbehaviortesting\">State vs. Behavior Testing</h1>\n\n<p>Not all unit tests are created equal. Both styles of testing accomplish the same goal, ensuring that the tested unit of the application performs it’s operations correctly. The difference is how these methodologies accomplish said goal.</p>\n\n<h2 id=\"stateverification\">State Verification</h2>\n\n<p>Let’s start with the classical style or state-driven testing first.  </p>\n\n<pre><code>// Adapted from Martin Fowler\n[TestClass]\npublic class OrderStateTester  \n{\n    private static String TALISKER = \"Talisker\";\n    private static String HIGHLAND_PARK = \"Highland Park\";\n    private Warehouse warehouse = new WarehouseImpl();\n\n    [TestInitialize]\n    protected void setUp() \n    {\n        warehouse.add(TALISKER, 50);\n        warehouse.add(HIGHLAND_PARK, 25);\n    }\n\n    [TestMethod]\n    public void testOrderIsFilledIfEnoughInWarehouse() \n    {\n        Order order = new Order(TALISKER, 50);\n        order.fill(warehouse);\n        Assert.IsTrue(order.isFilled());\n        Assert.Equals(0, warehouse.getInventory(TALISKER));\n    }\n\n    [TestMethod]\n    public void testOrderDoesNotRemoveIfNotEnough() \n    {\n        Order order = new Order(TALISKER, 51);\n        order.fill(warehouse);\n        Assert.IsFalse(order.isFilled());\n        Assert.Equals(50, warehouse.getInventory(TALISKER));\n    }\n}\n</code></pre>\n\n<p>Here we see a simple unit test following the model of Arrange, Act, Assert. This test covers the ability for an order to be filled from the stock of a warehouse, failing if no inventory is available. Each test starts by Arranging the players in the operation. The Order is created with the specified warehouse and inventory number requested. Then the test performs it’s Act phase, which attempts to fill the order. Then are two tests Assert if the order was filled, and that the warehouse had its stock removed according to the number requested by the order.</p>\n\n<p>In this case, there are two things of note. First, we are using an actual implementation of a <code>Warehouse</code> to perform some of our actions. That is because in order to test the <code>Order.fill()</code> method, a <code>Warehouse</code> object must be passed as a parameter. Second, is how we verify our test success in the Assert phase. We verify the final state of our application after the operations have been fulfilled. This <strong>state verification</strong> is what defines the classical style of unit testing.</p>\n\n<h2 id=\"behaviorverification\">Behavior Verification</h2>\n\n<p>Now let’s test the same functionality using the mockist style of testing.  </p>\n\n<pre><code>[TestClass]\npublic class OrderBehaviorTest  \n{\n    private static String TALISKER = \"Talisker\";\n\n    [TestMethod]\n    public void testFillingRemovesInventory()\n    {\n        // Arrange\n        Order order = new Order(TALISKER, 50);\n        var mock = new Mock&lt;Warehouse&gt;();\n        mock.Setup(x =&gt; x.hasInventory()).Returns(true);\n        mock.Setup(x =&gt; x.remove(TALISKER, 50));\n\n        // Act\n        order.fill(mock.Object);\n\n        // Assert\n        mock.Verify();\n        Assert.IsTrue(order.isFilled());\n    }\n\n    [TestMethod]\n    public void testFillingFails()\n    {\n        // Arrange\n        Order order = new Order(TALISKER, 51);\n        var mock = new Mock&lt;Warehouse&gt;();\n        mock.Setup(x =&gt; x.hasInventory()).Returns(false);\n\n        // Act\n        order.fill(mock.Object);\n\n        // Assert\n        Assert.IsFalse(order.isFilled());\n    }\n}\n</code></pre>\n\n<p>Here, we can see that we are verifying the same operation, the filling of an order. However, how we achieve that is much different. This methodology uses mock objects in place of actual implementations for the classes that we are not explicitly testing. This helps keep our unit test focused on that specific unit, isolating it from other parts of our system that should be testing independently.</p>\n\n<p>For our mock objects, which have been created by the <a href=\"http://www.moqthis.com/\">Moq Framework</a>, we setup the actions that we expect to be called during our Act phase and how those actions should respond. Notice that because we verify the behavior and not the state of the warehouse, we don’t need to worry about any logic correctly dictating whether or not our <code>Warehouse.hasInventory()</code> method will return the correct value. We explicitly state what result occurs. We can even specify the expected parameters for these mocked method calls, so that if <code>Order.fill()</code> incorrectly passes values, our test will know. (Check the documentation for your chosen mocking library to find out how explicit you can be with constraining the allowed behavior).</p>\n\n<h1 id=\"inconclusion\">In Conclusion</h1>\n\n<p>I’ve found that understanding this fundamental difference in testing styles has helped me in thoroughly testing my applications. Some people strictly adhere to one of the two methodologies, but I find that using a combination of both to fit my needs quite well. For small applications, if it helps me test quicker, I’ll write a classical test. However, most of the time I usually have some mocking library in use to isolate my unit testing. But even when I use mocking for my unit tests, I still sometime write integration tests that test multiple parts of the system at once, classical state tests are the way to go. In the end, it really just comes down to what problem you are trying to solve, and which tools best equip you to solve them.</p>","image":null,"featured":false,"page":false,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2013-12-11T00:22:07.000Z","created_by":1,"updated_at":"2014-01-03T16:31:30.000Z","updated_by":1,"published_at":"2013-12-11T00:27:19.000Z","published_by":1},{"id":5,"uuid":"e0e0ae4a-451a-46ff-b732-d4f52d7fbb65","title":"In The Beginning...","slug":"in-the-beginning","markdown":"I've worked on a number of different projects in my career. Many have been school projects with students during my time at [RIT](http://www.rit.edu/). Some have been projects during my tenure as Webmaster/Chief Engineer at [WITR](http://witr.rit.edu/). Countless projects for my employers. \n\nBut a lot has changed since I built [that first website](http://witr.rit.edu/) so long ago. I've grown both as a person and a developer. Amazing new tools have come out in recent years to streamline the development process. New paradigms in web development have take the community by storm. And I have personally learned so much in the past few years from testing to architecture to design and everything in between, that I still can't figure out how I've managed to cram all of it into my brain!\n\nAnd the learning doesn't stop! Which is why I decided to write this post. There are so many new technologies and tools that I want to explore, that I want something to bring them all together. I want to understand how to fit all the pieces together. How to take a Rails app, integrate it with Backbone, design using Sass/Compass, create extensive tests, architect RESTful APIs, manage everything using Grunt, and run it all under Vagrant provisioned by Chef. There seems to be so much that can go into developing a full web application that it almost takes the wind out of you! But I want to give it a shot.\n\n#The Project\nI have decided that I really want to learn **all** of these things. Not only would it make me a well rounded developer, but it will be fun!\n\nAnd so, with the new year, I decided, for the first time in my life, to give myself a New Year's Resolution. I'm not only going to learn how to **use** these tools, but build an app that proves I can **develop** with them.\n\nThe project itself is something that I feel can be complex enough to really challenge me, useful for not only me, but others, and is interesting enough to keep me engaged. And being the nerdy guy I am, I thought, what's better than a **Dungeons & Dragons Web App** which I have dubbed the **Forge**. \n\n###History\nThe idea first started in an iOS development class I took at [RIT](http://www.rit.edu). I created a character sheet app for D&D Next, since that's what my friends and I were playing at the time. I thought it would be fun and useful. In the final questionaire for the app project, there was a question that intrigued me: \"Hypothetically, what features would you add to your app in the next version?\" \n\nI think the question was geared toward a new app feature, like adding notifications or something. But I took it to an entirely different level. I thought about having a central website manage all the content, so that you could access your characters from the web, Android, iOS, Windows Phone, whatever. It's not a stretch, people build Web APIs all the time. I haven't until recently, and it wasn't very extensive. \n\nEvery since then, it was something in the back of my mind. A project I always wanted to do, but never committed to doing. Now, I will.\n\n#Moving Forward\nSo why write about this? Well, mostly it's just for me. This is a way for me to express my thoughts about this project I plan on undertaking, as well as keep track of them. But hey, if other people find what I write of some importance, who am I to deny them? I mean, you're reading this, aren't you?\n\nEvery step of the way, I plan on documenting my ideas, decisions, and progress, keep a developer journal of sorts. A post of why I might choose Marionette.js over Ember or Knockout. Something about a new feature I discover in Laravel. Whatever. If I found it useful, someone might too. Plus it allows me to solidify my understanding of whatever I happen to have done.\n\nI'm excited to get started, and share my journey along the way.\n\nUntil next time...","html":"<p>I've worked on a number of different projects in my career. Many have been school projects with students during my time at <a href=\"http://www.rit.edu/\">RIT</a>. Some have been projects during my tenure as Webmaster/Chief Engineer at <a href=\"http://witr.rit.edu/\">WITR</a>. Countless projects for my employers. </p>\n\n<p>But a lot has changed since I built <a href=\"http://witr.rit.edu/\">that first website</a> so long ago. I've grown both as a person and a developer. Amazing new tools have come out in recent years to streamline the development process. New paradigms in web development have take the community by storm. And I have personally learned so much in the past few years from testing to architecture to design and everything in between, that I still can't figure out how I've managed to cram all of it into my brain!</p>\n\n<p>And the learning doesn't stop! Which is why I decided to write this post. There are so many new technologies and tools that I want to explore, that I want something to bring them all together. I want to understand how to fit all the pieces together. How to take a Rails app, integrate it with Backbone, design using Sass/Compass, create extensive tests, architect RESTful APIs, manage everything using Grunt, and run it all under Vagrant provisioned by Chef. There seems to be so much that can go into developing a full web application that it almost takes the wind out of you! But I want to give it a shot.</p>\n\n<h1 id=\"theproject\">The Project</h1>\n\n<p>I have decided that I really want to learn <strong>all</strong> of these things. Not only would it make me a well rounded developer, but it will be fun!</p>\n\n<p>And so, with the new year, I decided, for the first time in my life, to give myself a New Year's Resolution. I'm not only going to learn how to <strong>use</strong> these tools, but build an app that proves I can <strong>develop</strong> with them.</p>\n\n<p>The project itself is something that I feel can be complex enough to really challenge me, useful for not only me, but others, and is interesting enough to keep me engaged. And being the nerdy guy I am, I thought, what's better than a <strong>Dungeons &amp; Dragons Web App</strong> which I have dubbed the <strong>Forge</strong>. </p>\n\n<h3 id=\"history\">History</h3>\n\n<p>The idea first started in an iOS development class I took at <a href=\"http://www.rit.edu\">RIT</a>. I created a character sheet app for D&amp;D Next, since that's what my friends and I were playing at the time. I thought it would be fun and useful. In the final questionaire for the app project, there was a question that intrigued me: \"Hypothetically, what features would you add to your app in the next version?\" </p>\n\n<p>I think the question was geared toward a new app feature, like adding notifications or something. But I took it to an entirely different level. I thought about having a central website manage all the content, so that you could access your characters from the web, Android, iOS, Windows Phone, whatever. It's not a stretch, people build Web APIs all the time. I haven't until recently, and it wasn't very extensive. </p>\n\n<p>Every since then, it was something in the back of my mind. A project I always wanted to do, but never committed to doing. Now, I will.</p>\n\n<h1 id=\"movingforward\">Moving Forward</h1>\n\n<p>So why write about this? Well, mostly it's just for me. This is a way for me to express my thoughts about this project I plan on undertaking, as well as keep track of them. But hey, if other people find what I write of some importance, who am I to deny them? I mean, you're reading this, aren't you?</p>\n\n<p>Every step of the way, I plan on documenting my ideas, decisions, and progress, keep a developer journal of sorts. A post of why I might choose Marionette.js over Ember or Knockout. Something about a new feature I discover in Laravel. Whatever. If I found it useful, someone might too. Plus it allows me to solidify my understanding of whatever I happen to have done.</p>\n\n<p>I'm excited to get started, and share my journey along the way.</p>\n\n<p>Until next time...</p>","image":null,"featured":false,"page":false,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2013-12-11T20:23:10.000Z","created_by":1,"updated_at":"2014-01-06T14:42:45.000Z","updated_by":1,"published_at":"2014-01-06T14:42:45.000Z","published_by":1},{"id":6,"uuid":"40136c3d-d2f5-4c32-80fd-5dbfd3a55393","title":"Gotta Start Somewhere","slug":"gotta-start-somewhere","markdown":"In an [earlier post](http://jpbetley.com/in-the-beginning), I wrote about my plan to start a solo project that encompasses a wide range of technologies, largely as a learning experience. \n\nAnd you've gotta start somewhere. \n\nFirst, I had to decide on a language and a framework to use as the building blocks of the Forge. There are a ton of great ways to build a web application these days. Ruby on Rails has been huge over the past five years or so. Node.js has spawned a server-side javascript revolution that has been well received throughout the community. Countless other frameworks, languages, and tools are available for accomplishing what I'm setting out to do. But there has been one framework that has really captured my interests this past year.\n\n### Laravel\nLaravel is a PHP framework developed by Taylor Otwell that makes building web applications easy, efficient, and fun. It has really come to renew my interest in working with PHP and introduced me to a great community full of intelligent developers who love to share their knowledge with people like me. It also pulls in some of the best resources from PHP to make a robust and feature rich framework to build applications of all types. If you don't believe me, check out [Built With Laravel](http://builtwithlaravel.com/) to see what Laravel is capable of.\n\nI have used this framework before on several small projects, but nothing substantial. So, because of my interest in exploring the framework and really understanding the potential it has, I've decided to use this as the starting point for Forge.\n\n#### Composer\nOne of the things that makes Laravel great is that it leverages PHP's package manager [Composer](http://getcomposer.org/). As I said before, Laravel pulls in some of the best resources for PHP, and it does so using Composer. \n\nComposer was built by Nils Adermann and Jordi Boggiano as a way to share PHP packages efficiently across projects, as well as make depencency management easier for developers. It took its lead from the PHP-FIG's definition of [PSR-0](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md) autoloading standards. This allows for developers to easily define a configuration file of all the dependencies in a project and run `composer install` to easily install those dependencies.\n\nLaravel itself, and the components that comprise it, are also available through Composer, which makes it super easy to get started once you have Composer installed.\n\n#### Installation\nIf composer is installed on your machine, to install Laravel, you just run `composer create-project laravel/laravel --prefer-dist`. This will create a directory for your Laravel project and install all of the required dependencies. Like I said, super easy.\n\n### PHP\nNow, going with Laravel as a framework means working in PHP. There have been plenty of posts by people scoffing at the language, but honestly I couldn't care less. PHP is a tool, and it's a tool I am comfortable with and truly enjoy using. It's not the cool kid on the block like node.js is these days, but hey, it'll get the job done. PHP is easy to write, easy to manage, easy to deploy. So when you're just trying to get in there and start **building** something, I'd say there's no language better.\n\n\n## Next\nSo, Forge is going to be built with Laravel. Great. Now what?\n\nWell, I need some way to run the project. But being on a Mac and production being an Ubuntu server, I don't really want to run locally. And so, the next step is to mimic production for development.","html":"<p>In an <a href=\"http://jpbetley.com/in-the-beginning\">earlier post</a>, I wrote about my plan to start a solo project that encompasses a wide range of technologies, largely as a learning experience. </p>\n\n<p>And you've gotta start somewhere. </p>\n\n<p>First, I had to decide on a language and a framework to use as the building blocks of the Forge. There are a ton of great ways to build a web application these days. Ruby on Rails has been huge over the past five years or so. Node.js has spawned a server-side javascript revolution that has been well received throughout the community. Countless other frameworks, languages, and tools are available for accomplishing what I'm setting out to do. But there has been one framework that has really captured my interests this past year.</p>\n\n<h3 id=\"laravel\">Laravel</h3>\n\n<p>Laravel is a PHP framework developed by Taylor Otwell that makes building web applications easy, efficient, and fun. It has really come to renew my interest in working with PHP and introduced me to a great community full of intelligent developers who love to share their knowledge with people like me. It also pulls in some of the best resources from PHP to make a robust and feature rich framework to build applications of all types. If you don't believe me, check out <a href=\"http://builtwithlaravel.com/\">Built With Laravel</a> to see what Laravel is capable of.</p>\n\n<p>I have used this framework before on several small projects, but nothing substantial. So, because of my interest in exploring the framework and really understanding the potential it has, I've decided to use this as the starting point for Forge.</p>\n\n<h4 id=\"composer\">Composer</h4>\n\n<p>One of the things that makes Laravel great is that it leverages PHP's package manager <a href=\"http://getcomposer.org/\">Composer</a>. As I said before, Laravel pulls in some of the best resources for PHP, and it does so using Composer. </p>\n\n<p>Composer was built by Nils Adermann and Jordi Boggiano as a way to share PHP packages efficiently across projects, as well as make depencency management easier for developers. It took its lead from the PHP-FIG's definition of <a href=\"https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md\">PSR-0</a> autoloading standards. This allows for developers to easily define a configuration file of all the dependencies in a project and run <code>composer install</code> to easily install those dependencies.</p>\n\n<p>Laravel itself, and the components that comprise it, are also available through Composer, which makes it super easy to get started once you have Composer installed.</p>\n\n<h4 id=\"installation\">Installation</h4>\n\n<p>If composer is installed on your machine, to install Laravel, you just run <code>composer create-project laravel/laravel --prefer-dist</code>. This will create a directory for your Laravel project and install all of the required dependencies. Like I said, super easy.</p>\n\n<h3 id=\"php\">PHP</h3>\n\n<p>Now, going with Laravel as a framework means working in PHP. There have been plenty of posts by people scoffing at the language, but honestly I couldn't care less. PHP is a tool, and it's a tool I am comfortable with and truly enjoy using. It's not the cool kid on the block like node.js is these days, but hey, it'll get the job done. PHP is easy to write, easy to manage, easy to deploy. So when you're just trying to get in there and start <strong>building</strong> something, I'd say there's no language better.</p>\n\n<h2 id=\"next\">Next</h2>\n\n<p>So, Forge is going to be built with Laravel. Great. Now what?</p>\n\n<p>Well, I need some way to run the project. But being on a Mac and production being an Ubuntu server, I don't really want to run locally. And so, the next step is to mimic production for development.</p>","image":null,"featured":false,"page":false,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2013-12-30T14:56:09.000Z","created_by":1,"updated_at":"2014-01-16T15:29:19.000Z","updated_by":1,"published_at":"2014-01-16T15:29:19.000Z","published_by":1},{"id":7,"uuid":"a9217dde-f0c3-491d-a244-aae7fb60e3b5","title":"Vagrant and VirtualBox and Provisioning, Oh My!","slug":"vagrant-and-virtualbox-and-provisioning-oh-my","markdown":"So, now that I've got the default installation of Laravel, I need to be able to run it. I do all of my development on my Macbook, which is good, but has a vastly different configuration than my Ubuntu production server. And I want to make sure that I am developing in an environment as close to production as possible. \n\nThis is the realm of virtual machines. I can spin up a VM that runs with the same configuration as my production server and my application can be developed and run as if it was live. [VirtualBox](https://www.virtualbox.org/) is a great solution for running VMs and is free to use.\n\nNow, this is all well and good, but if I have a friend or team member who is working on the project as well, I want he or she to be using the same environment. And sending around VirtualBox's files for a VM is pretty hefty. I mean, imagine checking those files into git. Nasty. \n\nBut what if I could just commit a configuration file that dictates how a VirtualBox VM should be created? It would be lightweight, and easy to share. Plus it ensures that every developer is using the same environment. That's the idea behind [Vagrant](http://www.vagrantup.com/).\n\n## Vagrant\nVagrant is a fantastic command line tool that lets you easily create, use, and delete virtual machines for development. In two commands, you can initialize and boot an Ubuntu 12.04 LTS 64-bit server.\n\n\t$ vagrant init precise64 http://files.vagrantup.com/precise64.box\n\t$ vagrant up\n\nThe first command does a few things. It creates a `Vagrantfile` in your current directory that dictates the configuration of your vagrant machine. It also creates a box (preconfigured vagrant machine) named \"precise64\" that comes from the url to the precise64.box file. If you open the `Vagrantfile` you'll see that it is configured to use this box.\n\nThe second command boots the vagrant machine. If it is the first time this machine has been booted, it will also do any installation setup. Now, this part is very important because this is the step where vagrant will configure your machine with the necessary packages you need. By predefining your provisioning, you ensure that when any new person grabs a copy of the project to work on it, `$ vagrant up` is the only command needed to be up and running.\n\n## Provisioning\nProvisioning your vagrant machine can be as complex as your situation requires. Vagrant supports provisioning in several different ways, including [Puppet](http://puppetlabs.com/) and [Chef](http://www.getchef.com/). However, simpler provisioning can just be done through bash scripts, which is simple enough for our needs.\n\nBy creating a simple bash script in our project, we can automatically run package installation commands when the vagrant machine is created. To get vagrant to run this script, add the following to your config section of the `Vagrantfile`.\n\n\tconfig.vm.provision :shell, :path => \"bootstrap.sh\"\n    \nThis will tell vagrant to run your shell script. Now, to get all of our packages we need, there is a lot of stuff we need to install using this script. Thankfully, fellow developer [Chris Fidao](http://fideloper.com/) has created a GitHub repository that contains common vagrant provisioning bash scripts.\n\n### Vaprobash\n[Vaprobash](https://github.com/fideloper/Vaprobash) is a `Vagrantfile` and accompanying bash scripts to provision the basic LAMP or LEMP stack. It uses the ondrej PHP 5.5 package, as well as includes other scripts for things like vim and composer. Using this as the basis for Forge's vagrant provisioning, I made a couple of adjustments to mimic my production server.\n\n#### MariaDB\nMySQL is a pretty commonly used database for most projects. Almost every web developer has in one point or another used it. MariaDB is a fork of that project maintained by some of the original developers of MySQL. It is an almost 1:1 drop-in replacement for MySQL, and any applications running on MySQL (like Wordpress) migrate seamlessly to MariaDB. I currently run MariaDB 10.0 on production.\n\nSo, in order to provision MariaDB, I made a few changes to the provisioning scripts. I created a `mariadb.sh` script based upon `mysql.sh`. Then I added in a few lines to pull from the MariaDB repo. The result was this:\n\n\techo \">>> Installing MariaDB Server\"\n\n\t# Install MariaDB without password prompt\n\t# Set username and password to 'root'\n\tsudo debconf-set-selections <<< 'mysql-server mysql-server/root_password password root'\n\tsudo debconf-set-selections <<< 'mysql-server mysql-server/root_password_again password root'\n    \n    # Add repo for MariaDB\n\tsudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xcbcb082a1bb943db\n\tsudo add-apt-repository 'deb http://mirror.jmu.edu/pub/mariadb/repo/10.0/ubuntu precise main'\n\n\t# Update\n\tsudo apt-get update\n\n\t# Install MariaDB Server\n\tsudo apt-get install -y mariadb-server\n    \nThis script will install MariaDB 10.0 for Ubuntu 12.04 LTS. Notice that the `debconf-set-selections` command still uses `mysql-server` settings. As I said before, MariaDB is a drop-in replacement for MySQL, so everything stays the same.\n\n#### Nginx\nThe nginx installation using Vaprobash installs the latest version of nginx. There were only a few changes that I made to the site configuration for vagrant.\n\nFirst was I changed the root from `/vagrant` to `/vagrant/public` for the Laravel application. Second, I changed the server_name to a name I defined in my hosts file since I don't use xip.io. Lastly, I changed some configurations to set the `LARAVEL_ENV` variable to `development` since that is the environment I work in. \n\nFinally, I updated my `Vagrantfile` to provision all the scripts I require. The result is this:\n\n\tVagrant.configure(\"2\") do |config|\n  \n  \tconfig.vm.box = \"precise64\"\n  \tconfig.vm.box_url = \"http://files.vagrantup.com/precise64.box\"\n  \tconfig.vm.network :private_network, ip: \"192.168.33.10\"\n  \tconfig.vm.synced_folder \".\", \"/vagrant\",\n            id: \"core\",\n            :nfs => true,\n            :mount_options => ['nolock,vers=3,udp,noatime']\n    \n      # Provision Nginx, PHP 5.5, and PHP-FPM\n      config.vm.provision \"shell\", path: \"./vagrant-scripts/lemp.sh\"\n    \n      # Provision MariaDB\n      config.vm.provision \"shell\", path: \"./vagrant-scripts/mariadb.sh\"\n    \n      # Provision Composer\n      config.vm.provision \"shell\", path: \"./vagrant-scripts/composer.sh\"\n    \n    end\n    \n","html":"<p>So, now that I've got the default installation of Laravel, I need to be able to run it. I do all of my development on my Macbook, which is good, but has a vastly different configuration than my Ubuntu production server. And I want to make sure that I am developing in an environment as close to production as possible. </p>\n\n<p>This is the realm of virtual machines. I can spin up a VM that runs with the same configuration as my production server and my application can be developed and run as if it was live. <a href=\"https://www.virtualbox.org/\">VirtualBox</a> is a great solution for running VMs and is free to use.</p>\n\n<p>Now, this is all well and good, but if I have a friend or team member who is working on the project as well, I want he or she to be using the same environment. And sending around VirtualBox's files for a VM is pretty hefty. I mean, imagine checking those files into git. Nasty. </p>\n\n<p>But what if I could just commit a configuration file that dictates how a VirtualBox VM should be created? It would be lightweight, and easy to share. Plus it ensures that every developer is using the same environment. That's the idea behind <a href=\"http://www.vagrantup.com/\">Vagrant</a>.</p>\n\n<h2 id=\"vagrant\">Vagrant</h2>\n\n<p>Vagrant is a fantastic command line tool that lets you easily create, use, and delete virtual machines for development. In two commands, you can initialize and boot an Ubuntu 12.04 LTS 64-bit server.</p>\n\n<pre><code>$ vagrant init precise64 http://files.vagrantup.com/precise64.box\n$ vagrant up\n</code></pre>\n\n<p>The first command does a few things. It creates a <code>Vagrantfile</code> in your current directory that dictates the configuration of your vagrant machine. It also creates a box (preconfigured vagrant machine) named \"precise64\" that comes from the url to the precise64.box file. If you open the <code>Vagrantfile</code> you'll see that it is configured to use this box.</p>\n\n<p>The second command boots the vagrant machine. If it is the first time this machine has been booted, it will also do any installation setup. Now, this part is very important because this is the step where vagrant will configure your machine with the necessary packages you need. By predefining your provisioning, you ensure that when any new person grabs a copy of the project to work on it, <code>$ vagrant up</code> is the only command needed to be up and running.</p>\n\n<h2 id=\"provisioning\">Provisioning</h2>\n\n<p>Provisioning your vagrant machine can be as complex as your situation requires. Vagrant supports provisioning in several different ways, including <a href=\"http://puppetlabs.com/\">Puppet</a> and <a href=\"http://www.getchef.com/\">Chef</a>. However, simpler provisioning can just be done through bash scripts, which is simple enough for our needs.</p>\n\n<p>By creating a simple bash script in our project, we can automatically run package installation commands when the vagrant machine is created. To get vagrant to run this script, add the following to your config section of the <code>Vagrantfile</code>.</p>\n\n<pre><code>config.vm.provision :shell, :path =&gt; \"bootstrap.sh\"\n</code></pre>\n\n<p>This will tell vagrant to run your shell script. Now, to get all of our packages we need, there is a lot of stuff we need to install using this script. Thankfully, fellow developer <a href=\"http://fideloper.com/\">Chris Fidao</a> has created a GitHub repository that contains common vagrant provisioning bash scripts.</p>\n\n<h3 id=\"vaprobash\">Vaprobash</h3>\n\n<p><a href=\"https://github.com/fideloper/Vaprobash\">Vaprobash</a> is a <code>Vagrantfile</code> and accompanying bash scripts to provision the basic LAMP or LEMP stack. It uses the ondrej PHP 5.5 package, as well as includes other scripts for things like vim and composer. Using this as the basis for Forge's vagrant provisioning, I made a couple of adjustments to mimic my production server.</p>\n\n<h4 id=\"mariadb\">MariaDB</h4>\n\n<p>MySQL is a pretty commonly used database for most projects. Almost every web developer has in one point or another used it. MariaDB is a fork of that project maintained by some of the original developers of MySQL. It is an almost 1:1 drop-in replacement for MySQL, and any applications running on MySQL (like Wordpress) migrate seamlessly to MariaDB. I currently run MariaDB 10.0 on production.</p>\n\n<p>So, in order to provision MariaDB, I made a few changes to the provisioning scripts. I created a <code>mariadb.sh</code> script based upon <code>mysql.sh</code>. Then I added in a few lines to pull from the MariaDB repo. The result was this:</p>\n\n<pre><code>echo \"&gt;&gt;&gt; Installing MariaDB Server\"\n\n# Install MariaDB without password prompt\n# Set username and password to 'root'\nsudo debconf-set-selections &lt;&lt;&lt; 'mysql-server mysql-server/root_password password root'\nsudo debconf-set-selections &lt;&lt;&lt; 'mysql-server mysql-server/root_password_again password root'\n\n# Add repo for MariaDB\nsudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xcbcb082a1bb943db\nsudo add-apt-repository 'deb http://mirror.jmu.edu/pub/mariadb/repo/10.0/ubuntu precise main'\n\n# Update\nsudo apt-get update\n\n# Install MariaDB Server\nsudo apt-get install -y mariadb-server\n</code></pre>\n\n<p>This script will install MariaDB 10.0 for Ubuntu 12.04 LTS. Notice that the <code>debconf-set-selections</code> command still uses <code>mysql-server</code> settings. As I said before, MariaDB is a drop-in replacement for MySQL, so everything stays the same.</p>\n\n<h4 id=\"nginx\">Nginx</h4>\n\n<p>The nginx installation using Vaprobash installs the latest version of nginx. There were only a few changes that I made to the site configuration for vagrant.</p>\n\n<p>First was I changed the root from <code>/vagrant</code> to <code>/vagrant/public</code> for the Laravel application. Second, I changed the server_name to a name I defined in my hosts file since I don't use xip.io. Lastly, I changed some configurations to set the <code>LARAVEL_ENV</code> variable to <code>development</code> since that is the environment I work in. </p>\n\n<p>Finally, I updated my <code>Vagrantfile</code> to provision all the scripts I require. The result is this:</p>\n\n<pre><code>Vagrant.configure(\"2\") do |config|\n\n  config.vm.box = \"precise64\"\n  config.vm.box_url = \"http://files.vagrantup.com/precise64.box\"\n  config.vm.network :private_network, ip: \"192.168.33.10\"\n  config.vm.synced_folder \".\", \"/vagrant\",\n        id: \"core\",\n        :nfs =&gt; true,\n        :mount_options =&gt; ['nolock,vers=3,udp,noatime']\n\n  # Provision Nginx, PHP 5.5, and PHP-FPM\n  config.vm.provision \"shell\", path: \"./vagrant-scripts/lemp.sh\"\n\n  # Provision MariaDB\n  config.vm.provision \"shell\", path: \"./vagrant-scripts/mariadb.sh\"\n\n  # Provision Composer\n  config.vm.provision \"shell\", path: \"./vagrant-scripts/composer.sh\"\n\nend\n</code></pre>","image":null,"featured":false,"page":false,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2013-12-30T17:13:51.000Z","created_by":1,"updated_at":"2014-01-02T16:05:38.000Z","updated_by":1,"published_at":null,"published_by":null},{"id":8,"uuid":"dd6ef254-92e9-44d0-82be-8059197e127f","title":"HHVM and PHP: Int Max Behavior","slug":"hhvm-and-php-int-max-behavior","markdown":"Today, [Anthony Ferrara](http://blog.ircmaxell.com/) mentioned some strange behaviors about the differences between HHVM and PHP runtimes. If you haven't heard of [HHVM](http://www.hhvm.com/blog/), definitely go check it out. It is a PHP execution engine built by Facebook that is extremely fast, which is why Facebook built and is using it.\n\nHowever, as Anthony mentioned in his [twitter post](https://twitter.com/ircmaxell/status/421013609754288128), HHVM isn't necessarily a direct drop-in replacement for PHP. And one of his points is about the two engines' behaviors concerning `PHP_INT_MAX`.\n\n###Making Max Overflow\nSo, Anthony wasn't highlighting the difference of `PHP_INT_MAX`, but rather what happens when you add to that. Conventional static-typed languages will have the [integer overflow](http://en.wikipedia.org/wiki/Integer_overflow), since it has to remain an integer. However, PHP is a dynamically-typed language, and so it adjusts itself to become a floating-point value so that it will accept the addition accurately.\n\nBut HHVM doesn't seem to follow the same rules. Let's prove it.\n\n####The Experiment\nWe can show the values and types of `PHP_INT_MAX` and `PHP_INT_MAX + 1` in a short script where we `var_dump` each value.\n\n```\n<?php\n\necho 'PHP_INT_MAX: ';\necho var_dump(PHP_INT_MAX) . PHP_EOL;\n\necho 'PHP_INT_MAX + 1: ';\necho var_dump(PHP_INT_MAX + 1) . PHP_EOL;\n```\n\n\n####The Results\nBelow, we run the script using standard PHP version 5.5 (64-bit), and we see our expected output.\n\n```\n# PHP Output\n$ php test.php\n  PHP_INT_MAX: int(9223372036854775807)\n  PHP_INT_MAX + 1: float(9.2233720368548E+18)\n```\n\nHowever, running the script with HHVM, we get a different result.\n\n```\n# HHVM Output\n$ hhvm test.php\n  PHP_INT_MAX: int(9223372036854775807)\n  PHP_INT_MAX + 1: int(-9223372036854775808)\n```\n\nWe can see that HHVM takes the static-typed approach to integers and overflows them to a negative value.\n\n### Lessons Learned\nThis helps highlight one of the reasons why HHVM isn't yet (or may never be) a drop-in replacement for PHP. If you wish to use HHVM, **make sure your code is tested** to be confident that your application will work properly.\n\nWhether or not PHP/HHVM should behave the way it does is a question to be answered by minds greater than my own. But for now, I hope this may save you some headache down the road.\n\n## \n\n\nAgain, thanks to Anthony Ferrara for giving me a lesson in PHP and computer science today.","html":"<p>Today, <a href=\"http://blog.ircmaxell.com/\">Anthony Ferrara</a> mentioned some strange behaviors about the differences between HHVM and PHP runtimes. If you haven't heard of <a href=\"http://www.hhvm.com/blog/\">HHVM</a>, definitely go check it out. It is a PHP execution engine built by Facebook that is extremely fast, which is why Facebook built and is using it.</p>\n\n<p>However, as Anthony mentioned in his <a href=\"https://twitter.com/ircmaxell/status/421013609754288128\">twitter post</a>, HHVM isn't necessarily a direct drop-in replacement for PHP. And one of his points is about the two engines' behaviors concerning <code>PHP_INT_MAX</code>.</p>\n\n<h3 id=\"makingmaxoverflow\">Making Max Overflow</h3>\n\n<p>So, Anthony wasn't highlighting the difference of <code>PHP_INT_MAX</code>, but rather what happens when you add to that. Conventional static-typed languages will have the <a href=\"http://en.wikipedia.org/wiki/Integer_overflow\">integer overflow</a>, since it has to remain an integer. However, PHP is a dynamically-typed language, and so it adjusts itself to become a floating-point value so that it will accept the addition accurately.</p>\n\n<p>But HHVM doesn't seem to follow the same rules. Let's prove it.</p>\n\n<h4 id=\"theexperiment\">The Experiment</h4>\n\n<p>We can show the values and types of <code>PHP_INT_MAX</code> and <code>PHP_INT_MAX + 1</code> in a short script where we <code>var_dump</code> each value.</p>\n\n<pre><code>&lt;?php\n\necho 'PHP_INT_MAX: ';  \necho var_dump(PHP_INT_MAX) . PHP_EOL;\n\necho 'PHP_INT_MAX + 1: ';  \necho var_dump(PHP_INT_MAX + 1) . PHP_EOL;  \n</code></pre>\n\n<h4 id=\"theresults\">The Results</h4>\n\n<p>Below, we run the script using standard PHP version 5.5 (64-bit), and we see our expected output.</p>\n\n<pre><code># PHP Output\n$ php test.php\n  PHP_INT_MAX: int(9223372036854775807)\n  PHP_INT_MAX + 1: float(9.2233720368548E+18)\n</code></pre>\n\n<p>However, running the script with HHVM, we get a different result.</p>\n\n<pre><code># HHVM Output\n$ hhvm test.php\n  PHP_INT_MAX: int(9223372036854775807)\n  PHP_INT_MAX + 1: int(-9223372036854775808)\n</code></pre>\n\n<p>We can see that HHVM takes the static-typed approach to integers and overflows them to a negative value.</p>\n\n<h3 id=\"lessonslearned\">Lessons Learned</h3>\n\n<p>This helps highlight one of the reasons why HHVM isn't yet (or may never be) a drop-in replacement for PHP. If you wish to use HHVM, <strong>make sure your code is tested</strong> to be confident that your application will work properly.</p>\n\n<p>Whether or not PHP/HHVM should behave the way it does is a question to be answered by minds greater than my own. But for now, I hope this may save you some headache down the road.</p>\n\n<h2 id=\"\"> </h2>\n\n<p>Again, thanks to Anthony Ferrara for giving me a lesson in PHP and computer science today.</p>","image":null,"featured":false,"page":false,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-01-08T21:11:52.000Z","created_by":1,"updated_at":"2014-01-08T23:29:21.000Z","updated_by":1,"published_at":"2014-01-08T21:32:31.000Z","published_by":1},{"id":9,"uuid":"1eced0e9-c883-4f00-8833-d2fad6c18a94","title":"PHP dotenv in Laravel","slug":"php-dotenv","markdown":"####EDIT: (2/13/2014)\nI just discovered that Taylor has built in [.env file loading](http://laravel.com/docs/configuration#protecting-sensitive-configuration) into core. By adding a file of type `.env.{environment}.php` to the root of your application, it will be autoloaded by Laravel much in the same way that dotenv does. Moving forward, this should be the preferred method of loading environment variables, but the principles of dotenv still apply, and can be used for things other than Laravel.\n\n####EDIT: (10/8/2014)\nTaylor has removed his own code for performing the .env file importing and will be utilizing Vance Lucas's PHP dotenv library for this functionality starting in version 5.\n\n---\n\nManaging environments is one of the difficult tasks many developers have to tackle when trying to create and deploy applications. Laravel makes setting up [environment-specific configuration](http://laravel.com/docs/configuration#environment-configuration) pretty easy. Setting different database credentials via this method is extremely easy and makes deployment simple. However, when making a project public or open source (on GitHub for example), you don't want to be showing your production system credentials to the world. \n\nMany production setups set some sort of environment variables for determining the application environment, such as `RAILS_ENV=\"production\"` or `LARAVEL_ENV=\"staging\"`. Those same environment variables are a great solution to having instance-specific values for things like API Keys. The issue with this solution is that it requires sys-admin intervention when you want to add new information, for that new Iron MQ push queue functionality you just introduced.\n\nLuckily for PHP Devs, [Vance Lucas](http://vancelucas.com/) created the [PHP dotenv](https://github.com/vlucas/phpdotenv) library that can load these variables from a `.env` file. **Remember to add `.env` to your .gitignore or other VCS-ignoring config, otherwise your production credentials can still be available. If you want to include some template file, I recommend a .env.example that shows the variables that need to be defined.**\n\n## Using dotenv with Laravel\ndotenv is available for installation through composer, so installation should feel familiar for most of you. Run the following to include the library as a dependency in your Laravel app.\n\n`composer require vlucas/phpdotenv --prefer-dist`\n\n### Loading dotenv\nSince the variables defined in our `.env` file are going to be used at varying points throughout the application, we want to ensure that it is loaded as early as possible in our application lifecycle, so the loading will occur in the `app/start` directory of the Laravel app.\n\nThe `app/start` directory contains the [start files](http://laravel.com/docs/lifecycle#start-files) that are loaded when Laravel begins execution. We have a few options in how we wish to load the environment variables. The first is including the code in the `global.php` file. This will load the environment variables for **every** environment you run your app in. However, I only wish to run it when in production. Thanks to Laravel, I can create an `{environment}.php` file in `app/start` and it will be loaded when that environment is in use, so I will be creating `production.php`. Use whatever method/file is appropriate for you, the code remains the same.\n\nIn the start file, setup begins by telling dotenv to load the `.env` file by providing it the directory that contains the file.\n\n`Dotenv::load(base_path());`\n\nHere, I'm telling dotenv to load the file from the root directory of my Laravel application. You can just as easily put it anywhere else, just make sure to send the directory path as a parameter to the `load` method.\n\nNext, I want to ensure that several variables are available from the `.env` file.\n\n`Dotenv::required(array('DB_HOST', 'DB_DATABASE', 'DB_USERNAME', 'DB_PASSWORD'));`\n\nThis call will check to make sure all of those variables have been loaded. If not, a `RuntimeException` will be thrown.\n\n### Using the Environment Variables\nAs you can see, I've used dotenv to load variables for my database connection. Getting to these variables is the same as getting other environment and server variables in php.\n\n```\n$DB_NAME = getenv('DB_NAME');\n$DB_NAME = $_ENV['DB_NAME'];\n$DB_NAME = $_SERVER['DB_NAME'];\n```\n\nAll three methods will work, but I prefer and would recommend the first so you aren't accessing [superglobals](http://www.php.net/manual/en/language.variables.superglobals.php) directly.\n\nNow I can change my production `app/config/database.php` file to load my credentials from the environment variables.\n\n```\n'connections' => array(\n    'mysql' => array(\n        'driver'    => 'mysql',\n        'host'      => getenv('DB_HOST'),\n        'database'  => getenv('DB_DATABASE'),\n        'username'  => getenv('DB_USERNAME'),\n        'password'  => getenv('DB_PASSWORD'),\n        'charset'   => 'utf8',\n        'collation' => 'utf8_unicode_ci',\n        'prefix'    => '',\n    ),\n),\n```\n\nClean, configurable, readable, and secure. Using this library, you can now make your application source code public, while remaining at ease that your system credentials aren't out in the open. Visit [phpdotenv's documentation](https://github.com/vlucas/phpdotenv) for more about the library and [Laravel's docs](http://laravel.com/docs) about environment configuration, if you wish to learn more.\n","html":"<h4 id=\"edit2132014\">EDIT: (2/13/2014)</h4>\n\n<p>I just discovered that Taylor has built in <a href=\"http://laravel.com/docs/configuration#protecting-sensitive-configuration\">.env file loading</a> into core. By adding a file of type <code>.env.{environment}.php</code> to the root of your application, it will be autoloaded by Laravel much in the same way that dotenv does. Moving forward, this should be the preferred method of loading environment variables, but the principles of dotenv still apply, and can be used for things other than Laravel.</p>\n\n<h4 id=\"edit1082014\">EDIT: (10/8/2014)</h4>\n\n<p>Taylor has removed his own code for performing the .env file importing and will be utilizing Vance Lucas's PHP dotenv library for this functionality starting in version 5.</p>\n\n<hr />\n\n<p>Managing environments is one of the difficult tasks many developers have to tackle when trying to create and deploy applications. Laravel makes setting up <a href=\"http://laravel.com/docs/configuration#environment-configuration\">environment-specific configuration</a> pretty easy. Setting different database credentials via this method is extremely easy and makes deployment simple. However, when making a project public or open source (on GitHub for example), you don't want to be showing your production system credentials to the world. </p>\n\n<p>Many production setups set some sort of environment variables for determining the application environment, such as <code>RAILS_ENV=\"production\"</code> or <code>LARAVEL_ENV=\"staging\"</code>. Those same environment variables are a great solution to having instance-specific values for things like API Keys. The issue with this solution is that it requires sys-admin intervention when you want to add new information, for that new Iron MQ push queue functionality you just introduced.</p>\n\n<p>Luckily for PHP Devs, <a href=\"http://vancelucas.com/\">Vance Lucas</a> created the <a href=\"https://github.com/vlucas/phpdotenv\">PHP dotenv</a> library that can load these variables from a <code>.env</code> file. <strong>Remember to add <code>.env</code> to your .gitignore or other VCS-ignoring config, otherwise your production credentials can still be available. If you want to include some template file, I recommend a .env.example that shows the variables that need to be defined.</strong></p>\n\n<h2 id=\"usingdotenvwithlaravel\">Using dotenv with Laravel</h2>\n\n<p>dotenv is available for installation through composer, so installation should feel familiar for most of you. Run the following to include the library as a dependency in your Laravel app.</p>\n\n<p><code>composer require vlucas/phpdotenv --prefer-dist</code></p>\n\n<h3 id=\"loadingdotenv\">Loading dotenv</h3>\n\n<p>Since the variables defined in our <code>.env</code> file are going to be used at varying points throughout the application, we want to ensure that it is loaded as early as possible in our application lifecycle, so the loading will occur in the <code>app/start</code> directory of the Laravel app.</p>\n\n<p>The <code>app/start</code> directory contains the <a href=\"http://laravel.com/docs/lifecycle#start-files\">start files</a> that are loaded when Laravel begins execution. We have a few options in how we wish to load the environment variables. The first is including the code in the <code>global.php</code> file. This will load the environment variables for <strong>every</strong> environment you run your app in. However, I only wish to run it when in production. Thanks to Laravel, I can create an <code>{environment}.php</code> file in <code>app/start</code> and it will be loaded when that environment is in use, so I will be creating <code>production.php</code>. Use whatever method/file is appropriate for you, the code remains the same.</p>\n\n<p>In the start file, setup begins by telling dotenv to load the <code>.env</code> file by providing it the directory that contains the file.</p>\n\n<p><code>Dotenv::load(base_path());</code></p>\n\n<p>Here, I'm telling dotenv to load the file from the root directory of my Laravel application. You can just as easily put it anywhere else, just make sure to send the directory path as a parameter to the <code>load</code> method.</p>\n\n<p>Next, I want to ensure that several variables are available from the <code>.env</code> file.</p>\n\n<p><code>Dotenv::required(array('DB_HOST', 'DB_DATABASE', 'DB_USERNAME', 'DB_PASSWORD'));</code></p>\n\n<p>This call will check to make sure all of those variables have been loaded. If not, a <code>RuntimeException</code> will be thrown.</p>\n\n<h3 id=\"usingtheenvironmentvariables\">Using the Environment Variables</h3>\n\n<p>As you can see, I've used dotenv to load variables for my database connection. Getting to these variables is the same as getting other environment and server variables in php.</p>\n\n<pre><code>$DB_NAME = getenv('DB_NAME');\n$DB_NAME = $_ENV['DB_NAME'];\n$DB_NAME = $_SERVER['DB_NAME'];\n</code></pre>\n\n<p>All three methods will work, but I prefer and would recommend the first so you aren't accessing <a href=\"http://www.php.net/manual/en/language.variables.superglobals.php\">superglobals</a> directly.</p>\n\n<p>Now I can change my production <code>app/config/database.php</code> file to load my credentials from the environment variables.</p>\n\n<pre><code>'connections' =&gt; array(  \n    'mysql' =&gt; array(\n        'driver'    =&gt; 'mysql',\n        'host'      =&gt; getenv('DB_HOST'),\n        'database'  =&gt; getenv('DB_DATABASE'),\n        'username'  =&gt; getenv('DB_USERNAME'),\n        'password'  =&gt; getenv('DB_PASSWORD'),\n        'charset'   =&gt; 'utf8',\n        'collation' =&gt; 'utf8_unicode_ci',\n        'prefix'    =&gt; '',\n    ),\n),\n</code></pre>\n\n<p>Clean, configurable, readable, and secure. Using this library, you can now make your application source code public, while remaining at ease that your system credentials aren't out in the open. Visit <a href=\"https://github.com/vlucas/phpdotenv\">phpdotenv's documentation</a> for more about the library and <a href=\"http://laravel.com/docs\">Laravel's docs</a> about environment configuration, if you wish to learn more.</p>","image":null,"featured":false,"page":false,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-01-16T15:55:55.000Z","created_by":1,"updated_at":"2014-10-09T00:36:43.000Z","updated_by":1,"published_at":"2014-01-16T17:06:57.000Z","published_by":1},{"id":10,"uuid":"dc4bd63f-e005-4c8a-9f2e-78648a79c41d","title":"Quick, Explicit Route::resource","slug":"quick-explicit-routeresource","markdown":"Laravel provides some excellent helpers for setting up routes in your web application. And when building RESTful and resourceful applications in Laravel, there is a helper, `Route::resource` that makes it easy to create a whole set of routes to a controller that manages that resource.\n\nHowever, many developers, myself included, think it is a better practice to explicity name all of the routes that would be covered by the `Route::resource` helper. But typing all of those routes is time consuming, so I created a simple Sublime Text snippet to help out with that.\n\n```\n<snippet>\n\t<content><![CDATA[\nRoute::get('${1:resource}', ['as' => '${1}.index', 'uses' => '${1/(.+)/\\u\\1/g}sController@index']);\nRoute::get('${1}/create', ['as' => '${1}.create', 'uses' => '${1/(.+)/\\u\\1/g}sController@create']);\nRoute::post('${1}', ['as' => '${1}.store', 'uses' => '${1/(.+)/\\u\\1/g}sController@store']);\nRoute::get('${1}/{${1}}', ['as' => '${1}.show', 'uses' => '${1/(.+)/\\u\\1/g}sController@show']);\nRoute::get('${1}/{${1}}/edit', ['as' => '${1}.edit', 'uses' => '${1/(.+)/\\u\\1/g}sController@edit']);\nRoute::put('${1}/{${1}}', ['as' => '${1}.update', 'uses' => '${1/(.+)/\\u\\1/g}sController@update']);\nRoute::patch('${1}/{${1}}', ['uses' => '${1/(.+)/\\u\\1/g}sController@update']);\nRoute::delete('${1}/{${1}}', ['as' => '${1}.destroy', 'uses' => '${1/(.+)/\\u\\1/g}sController@destroy']);\n]]></content>\n \n\t<tabTrigger>r::r</tabTrigger>\n\t\n\t<scope>source.php</scope>\n</snippet>\n```\n\nThe [snippet](https://gist.github.com/JPBetley/8627121) itself is triggered by `r::r` in php files and provides a quick way to create all your required routes for your resource, mapping to a controller of the same name.\n\nTo use the snippet, just download the [gist](https://gist.github.com/JPBetley/8627121) and include it in the `Packages\\User` directory of your Sublime Text installation.\n\nThe video below shows the use of the snippet in Sublime Text.\n\n<iframe name='quickcast' src='http://quick.as/embed/lr5h08q' scrolling='no' frameborder='0' width='100%' allowfullscreen></iframe><script src='http://quick.as/embed/script/1.52'></script>","html":"<p>Laravel provides some excellent helpers for setting up routes in your web application. And when building RESTful and resourceful applications in Laravel, there is a helper, <code>Route::resource</code> that makes it easy to create a whole set of routes to a controller that manages that resource.</p>\n\n<p>However, many developers, myself included, think it is a better practice to explicity name all of the routes that would be covered by the <code>Route::resource</code> helper. But typing all of those routes is time consuming, so I created a simple Sublime Text snippet to help out with that.</p>\n\n<pre><code>&lt;snippet&gt;  \n    &lt;content&gt;&lt;![CDATA[\nRoute::get('${1:resource}', ['as' =&gt; '${1}.index', 'uses' =&gt; '${1/(.+)/\\u\\1/g}sController@index']);  \nRoute::get('${1}/create', ['as' =&gt; '${1}.create', 'uses' =&gt; '${1/(.+)/\\u\\1/g}sController@create']);  \nRoute::post('${1}', ['as' =&gt; '${1}.store', 'uses' =&gt; '${1/(.+)/\\u\\1/g}sController@store']);  \nRoute::get('${1}/{${1}}', ['as' =&gt; '${1}.show', 'uses' =&gt; '${1/(.+)/\\u\\1/g}sController@show']);  \nRoute::get('${1}/{${1}}/edit', ['as' =&gt; '${1}.edit', 'uses' =&gt; '${1/(.+)/\\u\\1/g}sController@edit']);  \nRoute::put('${1}/{${1}}', ['as' =&gt; '${1}.update', 'uses' =&gt; '${1/(.+)/\\u\\1/g}sController@update']);  \nRoute::patch('${1}/{${1}}', ['uses' =&gt; '${1/(.+)/\\u\\1/g}sController@update']);  \nRoute::delete('${1}/{${1}}', ['as' =&gt; '${1}.destroy', 'uses' =&gt; '${1/(.+)/\\u\\1/g}sController@destroy']);  \n]]&gt;&lt;/content&gt;\n\n    &lt;tabTrigger&gt;r::r&lt;/tabTrigger&gt;\n\n    &lt;scope&gt;source.php&lt;/scope&gt;\n&lt;/snippet&gt;  \n</code></pre>\n\n<p>The <a href=\"https://gist.github.com/JPBetley/8627121\">snippet</a> itself is triggered by <code>r::r</code> in php files and provides a quick way to create all your required routes for your resource, mapping to a controller of the same name.</p>\n\n<p>To use the snippet, just download the <a href=\"https://gist.github.com/JPBetley/8627121\">gist</a> and include it in the <code>Packages\\User</code> directory of your Sublime Text installation.</p>\n\n<p>The video below shows the use of the snippet in Sublime Text.</p>\n\n<p><iframe name='quickcast' src='http://quick.as/embed/lr5h08q' scrolling='no' frameborder='0' width='100%' allowfullscreen></iframe><script src='http://quick.as/embed/script/1.52'></script></p>","image":null,"featured":false,"page":false,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-01-26T02:33:53.000Z","created_by":1,"updated_at":"2014-01-26T02:51:16.000Z","updated_by":1,"published_at":"2014-01-26T02:43:27.000Z","published_by":1},{"id":11,"uuid":"42c284a4-ad1a-4f1b-a5e6-5e5416fd51f8","title":"Gulp","slug":"gulp","markdown":"I've been working on using [Gulp](http://gulpjs.com/) as a task runner for doing things like compiling sass and coffeescript files in my projects. Gulp has turned out to be really slick with a lot of features coming from a variety of plugin packages. \n\nOne of my favorite packages to use with gulp is [gulp-notify](https://github.com/mikaelbr/gulp-notify) which will display notification messages whenever a task is run. It allows me to see what gulp is doing without having to navigate away from my editor.\n\nHere is an example of a simple gulpfile that does sass compilation:\n\n```\nvar gulp = require('gulp');\nvar sass = require('gulp-ruby-sass');\nvar notify = require('gulp-notify');\n\ngulp.task('sass', function() {\n\treturn gulp.src('app/assets/sass/style.scss')\n\t\t.pipe(sass({\n\t\t\tstyle: 'compressed'\n\t\t}))\n\t\t.pipe(gulp.dest('public/assets/css'))\n\t\t.pipe(notify({\n\t\t\tmessage: 'Compiled Sass'\n\t\t}));\n});\n\ngulp.task('watch', function () {\n  gulp.watch('app/assets/sass/*.scss', ['sass']);\n});\n\n// The default task (called when you run `gulp` from cli)\ngulp.task('default', ['sass']);\n```\n\nIf you're familiar with gulp, you can see the gulp-notify packages allows me to pipe to notify where I define the message to display. Running `gulp sass` will show a notification with 'Compiled Sass', which for me is displayed by Mac's Notification Center.\n\n! PUT IMAGE HERE !\n\nNow, this is all well and good, but I personally do development inside of a Vagrant VM.\n\n","html":"<p>I've been working on using <a href=\"http://gulpjs.com/\">Gulp</a> as a task runner for doing things like compiling sass and coffeescript files in my projects. Gulp has turned out to be really slick with a lot of features coming from a variety of plugin packages. </p>\n\n<p>One of my favorite packages to use with gulp is <a href=\"https://github.com/mikaelbr/gulp-notify\">gulp-notify</a> which will display notification messages whenever a task is run. It allows me to see what gulp is doing without having to navigate away from my editor.</p>\n\n<p>Here is an example of a simple gulpfile that does sass compilation:</p>\n\n<pre><code>var gulp = require('gulp');  \nvar sass = require('gulp-ruby-sass');  \nvar notify = require('gulp-notify');\n\ngulp.task('sass', function() {  \n    return gulp.src('app/assets/sass/style.scss')\n        .pipe(sass({\n            style: 'compressed'\n        }))\n        .pipe(gulp.dest('public/assets/css'))\n        .pipe(notify({\n            message: 'Compiled Sass'\n        }));\n});\n\ngulp.task('watch', function () {  \n  gulp.watch('app/assets/sass/*.scss', ['sass']);\n});\n\n// The default task (called when you run `gulp` from cli)\ngulp.task('default', ['sass']);  \n</code></pre>\n\n<p>If you're familiar with gulp, you can see the gulp-notify packages allows me to pipe to notify where I define the message to display. Running <code>gulp sass</code> will show a notification with 'Compiled Sass', which for me is displayed by Mac's Notification Center.</p>\n\n<p>! PUT IMAGE HERE !</p>\n\n<p>Now, this is all well and good, but I personally do development inside of a Vagrant VM.</p>","image":null,"featured":false,"page":false,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-02-06T18:55:07.000Z","created_by":1,"updated_at":"2014-02-06T18:55:50.000Z","updated_by":1,"published_at":null,"published_by":null},{"id":27,"uuid":"c069df60-02e0-4dd8-8d0c-6d44d52034de","title":"Tests Don't Make Bad Code Good","slug":"tests-dont-make-bad-code-good","markdown":"Another day, another back and forth discussion on Twitter about the merits of software development. \n\nThis morning, the topic was testing, and if having untested code inherently makes that code bad. It was all kicked off when our favorite PHP mentor [@coderabbi](https://twitter.com/coderabbi/) linked to the following from a conference:\n<blockquote class=\"twitter-tweet\" data-partner=\"tweetdeck\"><p lang=\"en\" dir=\"ltr\">In <a href=\"https://twitter.com/hashtag/Magento2?src=hash\">#Magento2</a>, untested code is incomplete code (<a href=\"https://twitter.com/benmarks\">@benmarks</a>) <a href=\"https://twitter.com/hashtag/realmagento?src=hash\">#realmagento</a> <a href=\"http://t.co/OvYX0Oczqb\">pic.twitter.com/OvYX0Oczqb</a></p>&mdash; Frédéric MARTINEZ (@FredMartinez) <a href=\"https://twitter.com/FredMartinez/status/653961304437338116\">October 13, 2015</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n####All code is tested, some way or another\nTo me, this discussion is very nuanced, becauase in some way, we all test our code eventually. Some people prefer to have all their code come with a suite of automated tests. This is perfectly reasonable, and something most, including myself, probably strive to do.\n\nThere are other situations where we only just manually test our code. Far too many times have I written some code or made a tweak, and booted up the browser to check if it worked or not. I doubt I'm the only one. This code is still tested, to a different degree.\n\nNow, if you ship code which hasn't been tested in any manner, whatsoever, then I wish you good luck. Because I can almost guarantee it has something wrong with it. Doing this is extremely risky, which is the main point I'm trying to make. Testing, and the manner in which you do so, is all meant to mitigate risk.\n\n####Risky Business\nThe manner in which we test our code affects the risk we take on when we ship code. Automated tests are the least risky, since they can be run quickly, and cover all areas of the codebase. Manual testing is very risky, not to mention time consuming! They tend not to be consistent, and we are unable to manually test the entire codebase when it starts to grow. And if you don't do any testing, we'll you're just inviting the worst to happen, as that code is beyond risky.\n\nGood code is written where it provides business value and runs correctly. That's it. Good code can be written in all three of these testing scenarios. Each of them have varying levels of risk where the code written will be bad. The tests themselves aren't what dictate good vs bad code. Tests help us increase the likelihood of writing good code, but tests don't make bad code good.","html":"<p>Another day, another back and forth discussion on Twitter about the merits of software development. </p>\n\n<p>This morning, the topic was testing, and if having untested code inherently makes that code bad. It was all kicked off when our favorite PHP mentor <a href=\"https://twitter.com/coderabbi/\">@coderabbi</a> linked to the following from a conference:  </p>\n\n<blockquote class=\"twitter-tweet\" data-partner=\"tweetdeck\"><p lang=\"en\" dir=\"ltr\">In <a href=\"https://twitter.com/hashtag/Magento2?src=hash\">#Magento2</a>, untested code is incomplete code (<a href=\"https://twitter.com/benmarks\">@benmarks</a>) <a href=\"https://twitter.com/hashtag/realmagento?src=hash\">#realmagento</a> <a href=\"http://t.co/OvYX0Oczqb\">pic.twitter.com/OvYX0Oczqb</a></p>&mdash; Frédéric MARTINEZ (@FredMartinez) <a href=\"https://twitter.com/FredMartinez/status/653961304437338116\">October 13, 2015</a></blockquote>  \n\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<h4 id=\"allcodeistestedsomewayoranother\">All code is tested, some way or another</h4>\n\n<p>To me, this discussion is very nuanced, becauase in some way, we all test our code eventually. Some people prefer to have all their code come with a suite of automated tests. This is perfectly reasonable, and something most, including myself, probably strive to do.</p>\n\n<p>There are other situations where we only just manually test our code. Far too many times have I written some code or made a tweak, and booted up the browser to check if it worked or not. I doubt I'm the only one. This code is still tested, to a different degree.</p>\n\n<p>Now, if you ship code which hasn't been tested in any manner, whatsoever, then I wish you good luck. Because I can almost guarantee it has something wrong with it. Doing this is extremely risky, which is the main point I'm trying to make. Testing, and the manner in which you do so, is all meant to mitigate risk.</p>\n\n<h4 id=\"riskybusiness\">Risky Business</h4>\n\n<p>The manner in which we test our code affects the risk we take on when we ship code. Automated tests are the least risky, since they can be run quickly, and cover all areas of the codebase. Manual testing is very risky, not to mention time consuming! They tend not to be consistent, and we are unable to manually test the entire codebase when it starts to grow. And if you don't do any testing, we'll you're just inviting the worst to happen, as that code is beyond risky.</p>\n\n<p>Good code is written where it provides business value and runs correctly. That's it. Good code can be written in all three of these testing scenarios. Each of them have varying levels of risk where the code written will be bad. The tests themselves aren't what dictate good vs bad code. Tests help us increase the likelihood of writing good code, but tests don't make bad code good.</p>","image":null,"featured":false,"page":false,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2015-10-14T12:07:28.325Z","created_by":1,"updated_at":"2015-10-14T12:28:45.479Z","updated_by":1,"published_at":"2015-10-14T12:28:45.480Z","published_by":1},{"id":12,"uuid":"d9bce18b-421d-4755-9bf3-010aa8b67b71","title":"Vagrant Gulp Notifications","slug":"vagrant-gulp-notifications","markdown":"One of my favorite packages to use with gulp is [gulp-notify](https://github.com/mikaelbr/gulp-notify) which will display notification messages whenever a task is run. It allows me to see what gulp is doing without having to navigate away from my editor. Here's an example for a sass compilation task.\n\n```\ngulp.task('sass', function() {\n\treturn gulp.src('app/assets/sass/style.scss')\n\t\t.pipe(sass({\n\t\t\tstyle: 'compressed'\n\t\t}))\n\t\t.pipe(gulp.dest('public/assets/css'))\n\t\t.pipe(notify({\n\t\t\tmessage: 'Compiled Sass'\n\t\t}));\n});\n```\n\nPiping the notify function with a message will display a notification with that message when the task is run. For me, that will be displayed using Mac's Notification Center.\n\n<a href=\"http://imgur.com/flNLQwN\"><img src=\"http://i.imgur.com/flNLQwN.png\" title=\"Hosted by imgur.com\" /></a>\n\nNow, this is all well and good, but I personally run my development environment inside of a Vagrant VM. Getting these notifications to be triggered from vagrant and be sent to Notification Center requires a little work.\n\n###Make Vagrant Forward Notifications\nOn the vagrant side of things, there is a plugin available to forward notifications from guest to host. [Vagrant notify](https://github.com/fgrehm/vagrant-notify) works by starting a TCPServer to listen for messages sent to it. These messages are sent by the `notify-send` script that is placed on the guest vm on boot by the plugin. \n\nTo install the plugin, run `$ vagrant plugin install vagrant-notify` and it will be used for all vagrant machines from now on.\n\nNow, `gulp-notify` will call the `notify-send` script provided by the plugin which will forward messages to the TCPServer listening on the host. The TCPServer will then call **another** `notify-send` script on the host, in this case, a Mac. \n\n###Mac's Notify-send Script\nBefore getting to the script, there is a required tool to download called [terminal-notifier](https://github.com/alloy/terminal-notifier), which is a ruby application that sends messages to Notification Center. \n\nI recommend grabbing the [prebuilt binary](https://github.com/alloy/terminal-notifier/releases/download/1.5.0/terminal-notifier-1.5.0.zip) and dropping it in `/Applications` as I had some trouble with the gem install version.\n\nOnce it has been downloaded, we need to write a short bash script called `notify-send` to run the terminal-notifier application with the message.\n\n```\n#!/bin/zsh\n/Applications/terminal-notifier.app/Contents/MacOS/terminal-notifier -title \"$2\" -message \"$3\"\n```\n\nSince the format of the message being sent by the vagrant plugin is `-- \"Gulp Notification\" \"Message\"`, we'll use the last two arguments to send to the terminal-notifier application. Now, move the script to a directory in your `$PATH`, such as `/usr/local/bin`, and make the script executable. \n\nWith all the pieces in place, whenever one of your Gulp tasks running in your vagrant machine sends a `notify` message, it will be forwarded to your Mac's Notification Center. \n\n","html":"<p>One of my favorite packages to use with gulp is <a href=\"https://github.com/mikaelbr/gulp-notify\">gulp-notify</a> which will display notification messages whenever a task is run. It allows me to see what gulp is doing without having to navigate away from my editor. Here's an example for a sass compilation task.</p>\n\n<pre><code>gulp.task('sass', function() {  \n    return gulp.src('app/assets/sass/style.scss')\n        .pipe(sass({\n            style: 'compressed'\n        }))\n        .pipe(gulp.dest('public/assets/css'))\n        .pipe(notify({\n            message: 'Compiled Sass'\n        }));\n});\n</code></pre>\n\n<p>Piping the notify function with a message will display a notification with that message when the task is run. For me, that will be displayed using Mac's Notification Center.</p>\n\n<p><a href=\"http://imgur.com/flNLQwN\"><img src=\"http://i.imgur.com/flNLQwN.png\" title=\"Hosted by imgur.com\" /></a></p>\n\n<p>Now, this is all well and good, but I personally run my development environment inside of a Vagrant VM. Getting these notifications to be triggered from vagrant and be sent to Notification Center requires a little work.</p>\n\n<h3 id=\"makevagrantforwardnotifications\">Make Vagrant Forward Notifications</h3>\n\n<p>On the vagrant side of things, there is a plugin available to forward notifications from guest to host. <a href=\"https://github.com/fgrehm/vagrant-notify\">Vagrant notify</a> works by starting a TCPServer to listen for messages sent to it. These messages are sent by the <code>notify-send</code> script that is placed on the guest vm on boot by the plugin. </p>\n\n<p>To install the plugin, run <code>$ vagrant plugin install vagrant-notify</code> and it will be used for all vagrant machines from now on.</p>\n\n<p>Now, <code>gulp-notify</code> will call the <code>notify-send</code> script provided by the plugin which will forward messages to the TCPServer listening on the host. The TCPServer will then call <strong>another</strong> <code>notify-send</code> script on the host, in this case, a Mac. </p>\n\n<h3 id=\"macsnotifysendscript\">Mac's Notify-send Script</h3>\n\n<p>Before getting to the script, there is a required tool to download called <a href=\"https://github.com/alloy/terminal-notifier\">terminal-notifier</a>, which is a ruby application that sends messages to Notification Center. </p>\n\n<p>I recommend grabbing the <a href=\"https://github.com/alloy/terminal-notifier/releases/download/1.5.0/terminal-notifier-1.5.0.zip\">prebuilt binary</a> and dropping it in <code>/Applications</code> as I had some trouble with the gem install version.</p>\n\n<p>Once it has been downloaded, we need to write a short bash script called <code>notify-send</code> to run the terminal-notifier application with the message.</p>\n\n<pre><code>#!/bin/zsh\n/Applications/terminal-notifier.app/Contents/MacOS/terminal-notifier -title \"$2\" -message \"$3\"\n</code></pre>\n\n<p>Since the format of the message being sent by the vagrant plugin is <code>-- \"Gulp Notification\" \"Message\"</code>, we'll use the last two arguments to send to the terminal-notifier application. Now, move the script to a directory in your <code>$PATH</code>, such as <code>/usr/local/bin</code>, and make the script executable. </p>\n\n<p>With all the pieces in place, whenever one of your Gulp tasks running in your vagrant machine sends a <code>notify</code> message, it will be forwarded to your Mac's Notification Center. </p>","image":null,"featured":false,"page":false,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-02-06T20:06:41.000Z","created_by":1,"updated_at":"2014-02-07T02:38:46.000Z","updated_by":1,"published_at":"2014-02-07T02:38:46.000Z","published_by":1},{"id":13,"uuid":"bc5fc639-126b-41e1-8551-21b34534a4ef","title":"What I've Been Watching","slug":"what-ive-been-watching","markdown":"Both [Zack Kitzmiller](http://b.z19r.com/post/what-ive-been-watching) and [Shawn McCool](https://twitter.com/ShawnMcCool) have been keeping lists of technical videos worth watching, and I thought it was a great idea. Having watched a lot of their videos, I thought of a list of videos that I think are worth watching, and so here they are.\n\n- [Ross Tuck - Models & Service Layers](http://rosstuck.com/phpnw13-models-service-layers-talk/)\n- [Ross Tuck - HTTP & Your Angry Dog](http://www.youtube.com/watch?v=2qBaMsYXtJ4)\n- [Uncle Bob - Clean Architecture](http://vimeo.com/43612849): Probably one of my favorite talks\n- [Rob Conery - Javascript Inferno](http://vimeo.com/73913825): \nGreat talk about various MV\\* JS frameworks\n- [Matt Whyne- Hexagonal Rails](http://youtu.be/CGN4RFkhH2M): Great supplement to Uncle Bob's Clean Architecture\n- [Stephen Wolfram - Wolfram Language](http://youtu.be/_P9HqHVPeik): Mind-blowing video about the language behind [WolframAlpha](https://www.wolframalpha.com/)\n- [Integrated Tests are a Scam](http://vimeo.com/80533536): Insight into testing and how to mitigate bad, unconstructive testing\n- [Teach a Dog to REST](http://vimeo.com/17785736): Great introduction to REST\n- [8 Lines of Code](http://www.infoq.com/presentations/8-lines-code-refactoring): Greg Young talks about keeping code simple to reduce tool dependencies\n- [Ember Is For The Children](https://www.youtube.com/watch?v=NCjlhOYD_bY): Amazing talk by DeVaris Brown. Shows the potential developers have to pay it forward and make a difference in a community","html":"<p>Both <a href=\"http://b.z19r.com/post/what-ive-been-watching\">Zack Kitzmiller</a> and <a href=\"https://twitter.com/ShawnMcCool\">Shawn McCool</a> have been keeping lists of technical videos worth watching, and I thought it was a great idea. Having watched a lot of their videos, I thought of a list of videos that I think are worth watching, and so here they are.</p>\n\n<ul>\n<li><a href=\"http://rosstuck.com/phpnw13-models-service-layers-talk/\">Ross Tuck - Models &amp; Service Layers</a></li>\n<li><a href=\"http://www.youtube.com/watch?v=2qBaMsYXtJ4\">Ross Tuck - HTTP &amp; Your Angry Dog</a></li>\n<li><a href=\"http://vimeo.com/43612849\">Uncle Bob - Clean Architecture</a>: Probably one of my favorite talks</li>\n<li><a href=\"http://vimeo.com/73913825\">Rob Conery - Javascript Inferno</a>: \nGreat talk about various MV* JS frameworks  </li>\n<li><a href=\"http://youtu.be/CGN4RFkhH2M\">Matt Whyne- Hexagonal Rails</a>: Great supplement to Uncle Bob's Clean Architecture</li>\n<li><a href=\"http://youtu.be/_P9HqHVPeik\">Stephen Wolfram - Wolfram Language</a>: Mind-blowing video about the language behind <a href=\"https://www.wolframalpha.com/\">WolframAlpha</a></li>\n<li><a href=\"http://vimeo.com/80533536\">Integrated Tests are a Scam</a>: Insight into testing and how to mitigate bad, unconstructive testing</li>\n<li><a href=\"http://vimeo.com/17785736\">Teach a Dog to REST</a>: Great introduction to REST</li>\n<li><a href=\"http://www.infoq.com/presentations/8-lines-code-refactoring\">8 Lines of Code</a>: Greg Young talks about keeping code simple to reduce tool dependencies</li>\n<li><a href=\"https://www.youtube.com/watch?v=NCjlhOYD_bY\">Ember Is For The Children</a>: Amazing talk by DeVaris Brown. Shows the potential developers have to pay it forward and make a difference in a community</li>\n</ul>","image":null,"featured":false,"page":false,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-03-06T14:46:08.000Z","created_by":1,"updated_at":"2014-04-22T23:18:08.000Z","updated_by":1,"published_at":"2014-04-22T23:18:08.000Z","published_by":1},{"id":14,"uuid":"056e864c-5402-4cb7-bb40-0fe03d290a90","title":"Laracon NYC: Day One","slug":"laracon-nyc-day-one","markdown":"I have the priveledge of attending this year's Laracon in New York City, and let me tell you...IT WAS AWESOME. AND IT IS ONLY DAY HALFWAY THROUGH.\n\nI was posting like crazy and went into a retweet frenzy pretty damn quickly, so naturally my phone dies around lunch. I saw a lot of great talks today and so, I wanted to recap today's events as a way to express what I learned, and give myself an opportunity to digest and reflect on day one  of my first ever developer conference.\n\n<img src=\"https://pbs.twimg.com/media/Bnrcn0_IMAE0iCR.jpg:large\" alt=\"Wide shot of the developer conference\" />\n\n###[Jeffrey Way](https://twitter.com/jeffrey_way)\nStarting off the conference was probably the most influential developer in my personal career, Jeffrey Way. If you are not familiar with him, he currently runs [Laracasts](https://laracasts.com), which is a fantastic resource for Laravel and other web dev tools. But back in the day, he used to run Tuts+, which is where I first learned all about Codeigniter from him while building the [WITR](http://witr.rit.edu) site during my college years. That project, and his lessons, are what ultimately lead me to choosing a career in web dev. But enough about that...\n\nJeffrey's presentation was a bit of a potpourri. He covered a wide range of topics such as the new Mail drivers in Laravel 4.2, tools like Behat and Gulp, and a myriad of other things. It was great seeing him kick things off with all of these tips, tricks, and tools, which is really what Jeffrey does best: whetting our appetites and letting us dig deeper ourselves.\n\n###[Jeremy Lindblom](https://twitter.com/jeremeamia)\nNext up was Jeremy Lindblom from Amazon talking about integrating AWS with Laravel. He showed off a lot of the cool services AWS provides that can be utilized for and by our Laravel applications. \n\nDuring his talk, he arhictected a scalable application using many of Amazon's platforms, using Laravel and the AWS SDK, which Jeremy works on. It was quite impressive to see the pieces fit together. I do wish his \"funny faces\" app he walked through was public so everyone at the conference could upload their own selfies using it.\n\n###[Jeremy Mikola](https://twitter.com/jmikola)\nFollowing Jeremy is Jeremy (Mikola) with his talk about [React PHP](http://reactphp.org/). React allows for asynchronous handling of events to be processed by your PHP application. Anyone who has used node.js before will understand immediately how this works. Jeremy showcased the benefits that asynchronous programming offers, presenting it in a understandable manner using Mario gifs! He even had a running chat app using React open during his talk that people could hop on (a bold, risky move with it showing on the big screen at a conference, but it went swimmingly).\n\n###[Shawn McCool](https://twitter.com/ShawnMcCool)\nAfter lunch, Shawn McCool gave a talk about integrating patterns derived from Design Driven Development practices during his revamp of the [Laravel.IO](http://laravel.io/forum) codebase. This was probably my **favorite** talk of the day. \n\n<img src=\"https://pbs.twimg.com/media/BnsiTmrCIAEDiw9.jpg:large\" alt=\"Shawn McCool presenting at Laracon\" />\n\nA major focus of his talk was on using a `CommandBus` to dispatch different `Commands` to `CommandHandlers` that directly derive themselves from business rules and actions. For example, you could have a `RegisterUserCommand` which does exactly what it sounds like, registers a user, fulfilled by the `RegisterUserHandler`. He also talked about using events and event dispatchers to keep code clean and each module focussed on a single responsibility. \n\nThis talk hit upon a lot of things that I have been learning about recently with my light exploration in DDD, and seeing Shawn's presentation really made a lot of things much clearer for me. This was a presentation that I learned a lot from and could take back to work with me and directly put these practices to use.\n\n###[Tim Griesser](https://twitter.com/tgriesser)\nTim's presentation was focussed less on Laravel and PHP, and more on web development on the other side of the fence/browser: Javascript. Tim touched on the tools, tips, tricks, and frameworks that are within the great expanse of this language. \n\nJavascript has many competing ecosystems and tools battling for attention, which differs from languages like PHP, Python, and Ruby. There are multiple popular build tools, package managers, and **my god** the number of frameworks/libraries. This is by no means a bad thing, and just happens to be a nature of the complexity that developers utilize Javascript in their applications. Tim's presentation was a welcome reminder that our jobs are to provide easy to use functionality for users, and Javascript remains a large part of that. (AND I FOR ONE WELCOME OUR NEW NODE.JS OVERLORDS)\n\n###Lightning Talks\nSara Goleman from Facebook was meant to give a talk in this slot, but was unable to attend. To fill the time, there were three lightning talks, (and some break dancing by [Maks Surguy](https://twitter.com/msurguy) which was impressive).\n\n####[Ian Landsman](https://twitter.com/ianlandsman)\nIan, the founder of UserScape, talks about giving back to Open Source in your company. He discussed his business's practice in allowing Taylor to work on the Laravel framework on UserScape's time, and why he thinks devoting just one work day a month from a developer can feed back many times over for the betterment of the company.\n\nI thoroughly enjoyed this talk, and even had the pleasure of talking to Ian himself afterwards about how he thinks other businesses can get involved. As an open source supporter, I got some tips from him on how best to approach helping open source projects through the business, and how to create a more open culture within the workspace, and the community at large.\n\n####[Kayla Daniels](https://twitter.com/kayladnls)\nKayla had probably the most powerful talk of the day. A very important, and very debated topic, within the tech community today, is the issue of marginalism, most commonly observed as sexism against women. \n\nKayla presented what she called the **\"Code Manifesto\"**. It is a simple set of guidelines that, if followed, would allow us to not only become better developers, but better people. And I think it is a fantastic idea. \n\n<img src=\"https://pbs.twimg.com/media/Bntd9tGIMAAwHZn.jpg\" alt=\"Kayla Daniels presenting at Laracon\" />\n\n####[Jeremy Mikola](https://twitter.com/jmikola)\nJeremy came back for a lightning talk about...lightning. No seriously. It was a 4-minute, rapid-fire, funny, entertaining talk that had the whole conference guffawing and knee-slapping.\n\n###[Taylor Otwell](https://twitter.com/taylorotwell)\n\nThen came Taylor Otwell with his keynote address, the one everyone has been waiting for. He started off covering where Laravel has been in the past year, and where it is going in the year to come.\n\n<img src=\"https://pbs.twimg.com/media/BntJUnhCcAAM1Ql.jpg:large\" alt=\"Taylor Otwell presenting at Laracon\" />\n\nThen, he started dropping bombs. He started with [Laravel Homestead](http://laravel.com/docs/homestead), a preconfigured vagrant box, made with practically all the tools and software you can think of too use all of the features in Laravel. Not just a standard LEMP stack, it includes memcached, beanstalk, supervisor, redis, etc. for your use. And their is no need to provision it anymore, the box is already set up. So instead of a 10 minute coffee break while vagrant boots, it's a 10 second download. **Fantastic.**\n\nBut he wasn't done yet. \n\nThen he unveiled his big project: [Laravel Forge](https://forge.laravel.com/). This is a web application to manage, provision, and maintain your cloud servers for your Laravel apps. It hooks into the APIs for Linode, DigitalOcean, and EC2 to do all of the work for you, provisioning the same stack as Homestead. The features go on and on, and you should do yourself a favor and check it out.\n\nI am reminded of DDH's keynote from a few weeks ago, when he declared \"TDD is Dead\". Yes, it spawned a lot of conversation because it was inflammatory, but to me, it seems like a cheap way to make it seem as though his presentation had substance. Taylor's presentation, in comparison, showed what developers really care about: tools they can use! It shows Taylor's commitment to Laravel and the community as a whole.\n\nTaylor has done a great job in providing developers the tools to create a unified Laravel experience, from **download to deploy**. Laravel's future looked bright, and now it certainly look brighter.\n\n---\n\nGo ahead and read my experiences of [Day Two of Laracon](http://jpbetley.com/laracon-nyc-day-two/)","html":"<p>I have the priveledge of attending this year's Laracon in New York City, and let me tell you...IT WAS AWESOME. AND IT IS ONLY DAY HALFWAY THROUGH.</p>\n\n<p>I was posting like crazy and went into a retweet frenzy pretty damn quickly, so naturally my phone dies around lunch. I saw a lot of great talks today and so, I wanted to recap today's events as a way to express what I learned, and give myself an opportunity to digest and reflect on day one  of my first ever developer conference.</p>\n\n<p><img src=\"https://pbs.twimg.com/media/Bnrcn0_IMAE0iCR.jpg:large\" alt=\"Wide shot of the developer conference\" /></p>\n\n<h3 id=\"jeffreywayhttpstwittercomjeffrey_way\"><a href=\"https://twitter.com/jeffrey_way\">Jeffrey Way</a></h3>\n\n<p>Starting off the conference was probably the most influential developer in my personal career, Jeffrey Way. If you are not familiar with him, he currently runs <a href=\"https://laracasts.com\">Laracasts</a>, which is a fantastic resource for Laravel and other web dev tools. But back in the day, he used to run Tuts+, which is where I first learned all about Codeigniter from him while building the <a href=\"http://witr.rit.edu\">WITR</a> site during my college years. That project, and his lessons, are what ultimately lead me to choosing a career in web dev. But enough about that...</p>\n\n<p>Jeffrey's presentation was a bit of a potpourri. He covered a wide range of topics such as the new Mail drivers in Laravel 4.2, tools like Behat and Gulp, and a myriad of other things. It was great seeing him kick things off with all of these tips, tricks, and tools, which is really what Jeffrey does best: whetting our appetites and letting us dig deeper ourselves.</p>\n\n<h3 id=\"jeremylindblomhttpstwittercomjeremeamia\"><a href=\"https://twitter.com/jeremeamia\">Jeremy Lindblom</a></h3>\n\n<p>Next up was Jeremy Lindblom from Amazon talking about integrating AWS with Laravel. He showed off a lot of the cool services AWS provides that can be utilized for and by our Laravel applications. </p>\n\n<p>During his talk, he arhictected a scalable application using many of Amazon's platforms, using Laravel and the AWS SDK, which Jeremy works on. It was quite impressive to see the pieces fit together. I do wish his \"funny faces\" app he walked through was public so everyone at the conference could upload their own selfies using it.</p>\n\n<h3 id=\"jeremymikolahttpstwittercomjmikola\"><a href=\"https://twitter.com/jmikola\">Jeremy Mikola</a></h3>\n\n<p>Following Jeremy is Jeremy (Mikola) with his talk about <a href=\"http://reactphp.org/\">React PHP</a>. React allows for asynchronous handling of events to be processed by your PHP application. Anyone who has used node.js before will understand immediately how this works. Jeremy showcased the benefits that asynchronous programming offers, presenting it in a understandable manner using Mario gifs! He even had a running chat app using React open during his talk that people could hop on (a bold, risky move with it showing on the big screen at a conference, but it went swimmingly).</p>\n\n<h3 id=\"shawnmccoolhttpstwittercomshawnmccool\"><a href=\"https://twitter.com/ShawnMcCool\">Shawn McCool</a></h3>\n\n<p>After lunch, Shawn McCool gave a talk about integrating patterns derived from Design Driven Development practices during his revamp of the <a href=\"http://laravel.io/forum\">Laravel.IO</a> codebase. This was probably my <strong>favorite</strong> talk of the day. </p>\n\n<p><img src=\"https://pbs.twimg.com/media/BnsiTmrCIAEDiw9.jpg:large\" alt=\"Shawn McCool presenting at Laracon\" /></p>\n\n<p>A major focus of his talk was on using a <code>CommandBus</code> to dispatch different <code>Commands</code> to <code>CommandHandlers</code> that directly derive themselves from business rules and actions. For example, you could have a <code>RegisterUserCommand</code> which does exactly what it sounds like, registers a user, fulfilled by the <code>RegisterUserHandler</code>. He also talked about using events and event dispatchers to keep code clean and each module focussed on a single responsibility. </p>\n\n<p>This talk hit upon a lot of things that I have been learning about recently with my light exploration in DDD, and seeing Shawn's presentation really made a lot of things much clearer for me. This was a presentation that I learned a lot from and could take back to work with me and directly put these practices to use.</p>\n\n<h3 id=\"timgriesserhttpstwittercomtgriesser\"><a href=\"https://twitter.com/tgriesser\">Tim Griesser</a></h3>\n\n<p>Tim's presentation was focussed less on Laravel and PHP, and more on web development on the other side of the fence/browser: Javascript. Tim touched on the tools, tips, tricks, and frameworks that are within the great expanse of this language. </p>\n\n<p>Javascript has many competing ecosystems and tools battling for attention, which differs from languages like PHP, Python, and Ruby. There are multiple popular build tools, package managers, and <strong>my god</strong> the number of frameworks/libraries. This is by no means a bad thing, and just happens to be a nature of the complexity that developers utilize Javascript in their applications. Tim's presentation was a welcome reminder that our jobs are to provide easy to use functionality for users, and Javascript remains a large part of that. (AND I FOR ONE WELCOME OUR NEW NODE.JS OVERLORDS)</p>\n\n<h3 id=\"lightningtalks\">Lightning Talks</h3>\n\n<p>Sara Goleman from Facebook was meant to give a talk in this slot, but was unable to attend. To fill the time, there were three lightning talks, (and some break dancing by <a href=\"https://twitter.com/msurguy\">Maks Surguy</a> which was impressive).</p>\n\n<h4 id=\"ianlandsmanhttpstwittercomianlandsman\"><a href=\"https://twitter.com/ianlandsman\">Ian Landsman</a></h4>\n\n<p>Ian, the founder of UserScape, talks about giving back to Open Source in your company. He discussed his business's practice in allowing Taylor to work on the Laravel framework on UserScape's time, and why he thinks devoting just one work day a month from a developer can feed back many times over for the betterment of the company.</p>\n\n<p>I thoroughly enjoyed this talk, and even had the pleasure of talking to Ian himself afterwards about how he thinks other businesses can get involved. As an open source supporter, I got some tips from him on how best to approach helping open source projects through the business, and how to create a more open culture within the workspace, and the community at large.</p>\n\n<h4 id=\"kayladanielshttpstwittercomkayladnls\"><a href=\"https://twitter.com/kayladnls\">Kayla Daniels</a></h4>\n\n<p>Kayla had probably the most powerful talk of the day. A very important, and very debated topic, within the tech community today, is the issue of marginalism, most commonly observed as sexism against women. </p>\n\n<p>Kayla presented what she called the <strong>\"Code Manifesto\"</strong>. It is a simple set of guidelines that, if followed, would allow us to not only become better developers, but better people. And I think it is a fantastic idea. </p>\n\n<p><img src=\"https://pbs.twimg.com/media/Bntd9tGIMAAwHZn.jpg\" alt=\"Kayla Daniels presenting at Laracon\" /></p>\n\n<h4 id=\"jeremymikolahttpstwittercomjmikola\"><a href=\"https://twitter.com/jmikola\">Jeremy Mikola</a></h4>\n\n<p>Jeremy came back for a lightning talk about...lightning. No seriously. It was a 4-minute, rapid-fire, funny, entertaining talk that had the whole conference guffawing and knee-slapping.</p>\n\n<h3 id=\"taylorotwellhttpstwittercomtaylorotwell\"><a href=\"https://twitter.com/taylorotwell\">Taylor Otwell</a></h3>\n\n<p>Then came Taylor Otwell with his keynote address, the one everyone has been waiting for. He started off covering where Laravel has been in the past year, and where it is going in the year to come.</p>\n\n<p><img src=\"https://pbs.twimg.com/media/BntJUnhCcAAM1Ql.jpg:large\" alt=\"Taylor Otwell presenting at Laracon\" /></p>\n\n<p>Then, he started dropping bombs. He started with <a href=\"http://laravel.com/docs/homestead\">Laravel Homestead</a>, a preconfigured vagrant box, made with practically all the tools and software you can think of too use all of the features in Laravel. Not just a standard LEMP stack, it includes memcached, beanstalk, supervisor, redis, etc. for your use. And their is no need to provision it anymore, the box is already set up. So instead of a 10 minute coffee break while vagrant boots, it's a 10 second download. <strong>Fantastic.</strong></p>\n\n<p>But he wasn't done yet. </p>\n\n<p>Then he unveiled his big project: <a href=\"https://forge.laravel.com/\">Laravel Forge</a>. This is a web application to manage, provision, and maintain your cloud servers for your Laravel apps. It hooks into the APIs for Linode, DigitalOcean, and EC2 to do all of the work for you, provisioning the same stack as Homestead. The features go on and on, and you should do yourself a favor and check it out.</p>\n\n<p>I am reminded of DDH's keynote from a few weeks ago, when he declared \"TDD is Dead\". Yes, it spawned a lot of conversation because it was inflammatory, but to me, it seems like a cheap way to make it seem as though his presentation had substance. Taylor's presentation, in comparison, showed what developers really care about: tools they can use! It shows Taylor's commitment to Laravel and the community as a whole.</p>\n\n<p>Taylor has done a great job in providing developers the tools to create a unified Laravel experience, from <strong>download to deploy</strong>. Laravel's future looked bright, and now it certainly look brighter.</p>\n\n<hr />\n\n<p>Go ahead and read my experiences of <a href=\"http://jpbetley.com/laracon-nyc-day-two/\">Day Two of Laracon</a></p>","image":null,"featured":false,"page":false,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-05-16T01:43:20.000Z","created_by":1,"updated_at":"2014-09-18T14:55:35.000Z","updated_by":1,"published_at":"2014-05-16T04:45:03.000Z","published_by":1},{"id":15,"uuid":"ba567d15-10cd-4999-82fd-fa461102c6a7","title":"Laracon NYC: Day Two","slug":"laracon-nyc-day-two","markdown":"In part two of the series, I'm going to cover the events of, you guessed it, the second day of Laracon. [Here is my summary of Day One](http://jpbetley.com/laracon-nyc-day-one/)\n\n<img src=\"https://pbs.twimg.com/media/BnxBZJWCMAAJQNH.jpg:large\" />\n\nLots occurred on day two, including one of the best talks I have ever seen. Let's get to it!\n\n###[Dayle Rees](https://twitter.com/daylerees/)\n\n<img src=\"https://pbs.twimg.com/media/BnwnxiqCEAAYv6j.jpg:large\" alt=\"Dayle Rees\" />\n\nDayle started out day two with his talk **Breaking the Mold**. He talked about what steps, as developers, we can take to break out of the structure that Laravel provides out of box and create a structure that better fits our needs.\n\nDayle covered how he organizes his projects in such a way that it makes sense for him. His reasoning is that it provides answers to one of the hardest questions when working with a framework: \"Where do I put this?\". It was an enlightening talk about how to write an application that uses Laravel, and not to use Laravel to write an application.\n\n###[Chris Fidao](https://twitter.com/fideloper/)\n\n<img src=\"https://pbs.twimg.com/media/Bnw10OgCcAESFjE.jpg:large\" alt=\"Chris Fidao\" />\n\nChris presented a high-level talk about a very popular topic of the day, and one that I am highly interested in. This presentation covered **Hexagonal Architecture** as a concept, how it works, why it is useful, and how the flow of information and logic flows within this structure.\n\nWhile the talk did not include concrete code examples showcasing this architecture, Chris's presentation coupled with the ones given by Dayle and Shawn presented a very robust approach for building complex applications using Laravel.\n\n###[Greg Baugues](https://twitter.com/greggyb)\n\n<iframe src=\"//player.vimeo.com/video/78419167\" width=\"500\" height=\"281\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n\n######[From The BLN & Business of Software](http://vimeo.com/theblnbusinessofsoftware)\n\nThis was hands down the best talk of the day, [**Devs and Depression**](http://baugues.com/depression). Greg painted a picture of the struggles that many people in the development world suffer through due to mental illness. He told us his story, shared his experiences, and showed us that people who have these issues are not alone, nor are they helpless to take control of their lives. He also shared with us the stories of those who were not as fortunate as he was.\n\nGreg crafted a wonderful story full of humor, struggle, shame, and triumph. He presented his life in an easily accessible manner, which really put our lives in to perspective. Truly an amazing and inspiring talk, and well deserving of his standing ovation.\n\n###[John Resig](https://twitter.com/jeresig)\n\n<img src=\"https://pbs.twimg.com/media/BnyYo6NIgAApKJX.jpg:large\" />\n\nJohn (a fellow alum of RIT) gave a talk that wasn't technical, but still very important and vital to the development community. John works at [Khan Academy](https://www.khanacademy.org/) which works to provide students with the learning tools that may better fit their learning methods. John works specifically on the CS curriculum and showcased a lot of their efforts and outstanding technologies they utilize to allow students to get instant feedback while writing their programs.\n\nSome attendees criticized this talk for not fitting the mold of what was expected from a presentation at Laracon. I completely disagree. John showed off the opportunities we as developers have to bring up the next generation (or as Cal Evans puts it, version) of developers. As a member of the Laravel, PHP, and greater developer community, I believe we can have more of an impact on the future of our field than we realize, and John's talk showed us just that.\n\n###[Igor Wiedler](https://twitter.com/igorwhiletrue)\n\nIgor's talk goes into the theoretical aspects of computer science with his presentation on **Abstract Machines**. \n\n<img src=\"https://pbs.twimg.com/media/Bn8YUhOCAAA0pCf.jpg:large\" />\n\nIgor flashed the audience back in time to our days in Discrete Math and Computer Language Concepts. We were shown \"Conway's Game of Life\" and state machines. We explored the evolution of early machine computation with the Turing Machine. While highly technical and verbose, Igor did a great job presenting what some might see as a bland topic. But honestly, I feel like I understood more from this talk than I did from my professors in college.\n\n###[Cal Evans](https://twitter.com/CalEvans)\n\nLaracon ended with the venerable Cal Evans and his talk **Going Pro**. \n\n<img src=\"https://pbs.twimg.com/media/BnyLqAcIAAAu-re.jpg:large\" />\n\nThis fantastic talk tackled the issue of how us developers percieve ourselves in the professional world, and what it truly means to grow from being a Duct Tap Master to a true Professional. Funny and engaging, Cal is a masterful presenter, and his presentation on the D.U.C.C.H.T. philosophy is one that rang true, at least for me. \n\nMany people have their own definitions of what makes a developer a professional (like Uncle Bob and practicing TDD), but Cal's is the one that makes most practical sense to me. Being a professional wasn't about making money or some technical practice. It's about being an student, teacher, and teammate who others can depend upon.\n\n###Closing Remarks\nLaracon was my first ever developer conference, and hopefully it won't be my last. I met a metric ton of awesome people and learned more in two days than I thought was possible. After it was all over, and I was heading back home, I only had two thoughts in my mind:\n\n####I want to take what I learned and go build something awesome.\n\n####And I want to be up on that stage one day, providing others with the same astounding experience I just had.","html":"<p>In part two of the series, I'm going to cover the events of, you guessed it, the second day of Laracon. <a href=\"http://jpbetley.com/laracon-nyc-day-one/\">Here is my summary of Day One</a></p>\n\n<p><img src=\"https://pbs.twimg.com/media/BnxBZJWCMAAJQNH.jpg:large\" /></p>\n\n<p>Lots occurred on day two, including one of the best talks I have ever seen. Let's get to it!</p>\n\n<h3 id=\"daylereeshttpstwittercomdaylerees\"><a href=\"https://twitter.com/daylerees/\">Dayle Rees</a></h3>\n\n<p><img src=\"https://pbs.twimg.com/media/BnwnxiqCEAAYv6j.jpg:large\" alt=\"Dayle Rees\" /></p>\n\n<p>Dayle started out day two with his talk <strong>Breaking the Mold</strong>. He talked about what steps, as developers, we can take to break out of the structure that Laravel provides out of box and create a structure that better fits our needs.</p>\n\n<p>Dayle covered how he organizes his projects in such a way that it makes sense for him. His reasoning is that it provides answers to one of the hardest questions when working with a framework: \"Where do I put this?\". It was an enlightening talk about how to write an application that uses Laravel, and not to use Laravel to write an application.</p>\n\n<h3 id=\"chrisfidaohttpstwittercomfideloper\"><a href=\"https://twitter.com/fideloper/\">Chris Fidao</a></h3>\n\n<p><img src=\"https://pbs.twimg.com/media/Bnw10OgCcAESFjE.jpg:large\" alt=\"Chris Fidao\" /></p>\n\n<p>Chris presented a high-level talk about a very popular topic of the day, and one that I am highly interested in. This presentation covered <strong>Hexagonal Architecture</strong> as a concept, how it works, why it is useful, and how the flow of information and logic flows within this structure.</p>\n\n<p>While the talk did not include concrete code examples showcasing this architecture, Chris's presentation coupled with the ones given by Dayle and Shawn presented a very robust approach for building complex applications using Laravel.</p>\n\n<h3 id=\"gregbaugueshttpstwittercomgreggyb\"><a href=\"https://twitter.com/greggyb\">Greg Baugues</a></h3>\n\n<iframe src=\"//player.vimeo.com/video/78419167\" width=\"500\" height=\"281\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n\n<h6 id=\"fromtheblnbusinessofsoftwarehttpvimeocomtheblnbusinessofsoftware\"><a href=\"http://vimeo.com/theblnbusinessofsoftware\">From The BLN &amp; Business of Software</a></h6>\n\n<p>This was hands down the best talk of the day, <a href=\"http://baugues.com/depression\"><strong>Devs and Depression</strong></a>. Greg painted a picture of the struggles that many people in the development world suffer through due to mental illness. He told us his story, shared his experiences, and showed us that people who have these issues are not alone, nor are they helpless to take control of their lives. He also shared with us the stories of those who were not as fortunate as he was.</p>\n\n<p>Greg crafted a wonderful story full of humor, struggle, shame, and triumph. He presented his life in an easily accessible manner, which really put our lives in to perspective. Truly an amazing and inspiring talk, and well deserving of his standing ovation.</p>\n\n<h3 id=\"johnresighttpstwittercomjeresig\"><a href=\"https://twitter.com/jeresig\">John Resig</a></h3>\n\n<p><img src=\"https://pbs.twimg.com/media/BnyYo6NIgAApKJX.jpg:large\" /></p>\n\n<p>John (a fellow alum of RIT) gave a talk that wasn't technical, but still very important and vital to the development community. John works at <a href=\"https://www.khanacademy.org/\">Khan Academy</a> which works to provide students with the learning tools that may better fit their learning methods. John works specifically on the CS curriculum and showcased a lot of their efforts and outstanding technologies they utilize to allow students to get instant feedback while writing their programs.</p>\n\n<p>Some attendees criticized this talk for not fitting the mold of what was expected from a presentation at Laracon. I completely disagree. John showed off the opportunities we as developers have to bring up the next generation (or as Cal Evans puts it, version) of developers. As a member of the Laravel, PHP, and greater developer community, I believe we can have more of an impact on the future of our field than we realize, and John's talk showed us just that.</p>\n\n<h3 id=\"igorwiedlerhttpstwittercomigorwhiletrue\"><a href=\"https://twitter.com/igorwhiletrue\">Igor Wiedler</a></h3>\n\n<p>Igor's talk goes into the theoretical aspects of computer science with his presentation on <strong>Abstract Machines</strong>. </p>\n\n<p><img src=\"https://pbs.twimg.com/media/Bn8YUhOCAAA0pCf.jpg:large\" /></p>\n\n<p>Igor flashed the audience back in time to our days in Discrete Math and Computer Language Concepts. We were shown \"Conway's Game of Life\" and state machines. We explored the evolution of early machine computation with the Turing Machine. While highly technical and verbose, Igor did a great job presenting what some might see as a bland topic. But honestly, I feel like I understood more from this talk than I did from my professors in college.</p>\n\n<h3 id=\"calevanshttpstwittercomcalevans\"><a href=\"https://twitter.com/CalEvans\">Cal Evans</a></h3>\n\n<p>Laracon ended with the venerable Cal Evans and his talk <strong>Going Pro</strong>. </p>\n\n<p><img src=\"https://pbs.twimg.com/media/BnyLqAcIAAAu-re.jpg:large\" /></p>\n\n<p>This fantastic talk tackled the issue of how us developers percieve ourselves in the professional world, and what it truly means to grow from being a Duct Tap Master to a true Professional. Funny and engaging, Cal is a masterful presenter, and his presentation on the D.U.C.C.H.T. philosophy is one that rang true, at least for me. </p>\n\n<p>Many people have their own definitions of what makes a developer a professional (like Uncle Bob and practicing TDD), but Cal's is the one that makes most practical sense to me. Being a professional wasn't about making money or some technical practice. It's about being an student, teacher, and teammate who others can depend upon.</p>\n\n<h3 id=\"closingremarks\">Closing Remarks</h3>\n\n<p>Laracon was my first ever developer conference, and hopefully it won't be my last. I met a metric ton of awesome people and learned more in two days than I thought was possible. After it was all over, and I was heading back home, I only had two thoughts in my mind:</p>\n\n<h4 id=\"iwanttotakewhatilearnedandgobuildsomethingawesome\">I want to take what I learned and go build something awesome.</h4>\n\n<h4 id=\"andiwanttobeuponthatstageonedayprovidingotherswiththesameastoundingexperienceijusthad\">And I want to be up on that stage one day, providing others with the same astounding experience I just had.</h4>","image":null,"featured":false,"page":false,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-05-16T15:08:23.000Z","created_by":1,"updated_at":"2014-05-20T20:48:13.000Z","updated_by":1,"published_at":"2014-05-20T20:45:50.000Z","published_by":1},{"id":16,"uuid":"7af4c67d-1ac5-4373-85b7-c4b8ffc0a91b","title":"Self-Hosted Web Services","slug":"self-hosted-web-services","markdown":"I LOVE using web services to offload functionality from my application or workflow. From things like monitoring to logging to bug reporting, there are multiple paid services that will do this for you. And all of them are great.\n\nHowever, there are sometimes situations where using a self-hosted, free solution might fit better for your organization/application. So I've compiled a list of these different web services for others to discover like I did.\n\n### Source Control\n\n[Gitlab](https://www.gitlab.com/): Self-hosted Git Solution. This is great for keeping your business's internal work within the network, or for any side client work you may want to do, without putting it up on public repos, like Github.\n\n### Server Monitoring\n[Amon](http://old.amon.cx/): Server Montioring Web Service. The creator has made a new version of this software, selling it as a SaaS. But he has made the old version open source and free for all.\n\n[Cabot](http://cabotapp.com/)\n\n[Sensu](http://sensuapp.org/)\n\n###Logging\n[Graylog](http://graylog2.org/)\n\n###Analytics\n[Piwik](http://piwik.org/)\n\n###Newsletters\n\n[Sendy](http://sendy.co/)\n\n###Invoicing\n[PancakeApp](https://pancakeapp.com/)\n\n[FusionInvoice](https://www.fusioninvoice.com/)\n\n###Project Management\n[Duet](https://duetapp.com/)","html":"<p>I LOVE using web services to offload functionality from my application or workflow. From things like monitoring to logging to bug reporting, there are multiple paid services that will do this for you. And all of them are great.</p>\n\n<p>However, there are sometimes situations where using a self-hosted, free solution might fit better for your organization/application. So I've compiled a list of these different web services for others to discover like I did.</p>\n\n<h3 id=\"sourcecontrol\">Source Control</h3>\n\n<p><a href=\"https://www.gitlab.com/\">Gitlab</a>: Self-hosted Git Solution. This is great for keeping your business's internal work within the network, or for any side client work you may want to do, without putting it up on public repos, like Github.</p>\n\n<h3 id=\"servermonitoring\">Server Monitoring</h3>\n\n<p><a href=\"http://old.amon.cx/\">Amon</a>: Server Montioring Web Service. The creator has made a new version of this software, selling it as a SaaS. But he has made the old version open source and free for all.</p>\n\n<p><a href=\"http://cabotapp.com/\">Cabot</a></p>\n\n<p><a href=\"http://sensuapp.org/\">Sensu</a></p>\n\n<h3 id=\"logging\">Logging</h3>\n\n<p><a href=\"http://graylog2.org/\">Graylog</a></p>\n\n<h3 id=\"analytics\">Analytics</h3>\n\n<p><a href=\"http://piwik.org/\">Piwik</a></p>\n\n<h3 id=\"newsletters\">Newsletters</h3>\n\n<p><a href=\"http://sendy.co/\">Sendy</a></p>\n\n<h3 id=\"invoicing\">Invoicing</h3>\n\n<p><a href=\"https://pancakeapp.com/\">PancakeApp</a></p>\n\n<p><a href=\"https://www.fusioninvoice.com/\">FusionInvoice</a></p>\n\n<h3 id=\"projectmanagement\">Project Management</h3>\n\n<p><a href=\"https://duetapp.com/\">Duet</a></p>","image":null,"featured":false,"page":false,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-06-06T18:49:35.000Z","created_by":1,"updated_at":"2014-09-19T13:31:39.000Z","updated_by":1,"published_at":null,"published_by":null},{"id":17,"uuid":"a0ef2a79-d7f2-43d3-9613-17dcf3c05f3a","title":"A Case For An Interface","slug":"a-case-to-interface","markdown":"I had an interesting discussion the other day with a colleague about some code I had written. He didn't understand why I had written an interface for a class when there didn't seem to be any kind of inheritance or multiple implementations. Essentially, he asked the questions \"Why can't I just use the class instead of the interface?\".\n\nWhen he asked this, I tried to come up with a good explanation, and my words failed me. This was just the way I've been doing it for so long, I couldn't adequately express why I had intuitively created an interface when I didn't have multiple implementations. I've since solidified my ideas, but before going into them, I'd like to explicitly describe the case against.\n\n##The Case Against\nThe side my colleague was taking was all about the utility of the code within the application. Say we have `ClassA` which implements `InterfaceA` and `ClassB` which depends upon `InterfaceA`. In this example, `ClassB` could just depend directly upon `ClassA` and no functionality would change. The case against argues about adding additional complexity and indirection by introducing the Interface which adds nothing to the functionality of the code that needs to be executed.\n\nNow, let's imagine a `ClassC`, which also implemented `InterfaceA`. We no longer want to use `ClassA` at all, and want to use `ClassC`. This case argues that we can either change `ClassB` to use `ClassC` which isn't that much work to change. Or since we no longer are using `ClassA`, why not just replace the functionality of `ClassA` to be what `ClassC` is, and `ClassB` no longer has to change. Essentially, if we want `ClassA` to function like `ClassC` now, why not just change `ClassA` instead of introducing a second class.\n\nThe crux of this argument is based upon the idea that an interface is only useful for determining the root structure of inheritance. In this case, if I want to use both `ClassA` and `ClassC` in `ClassB` there needs to be some commonality between them, so an interface is introduced. But if only one class is used during run time, there is no need for an interface, as the implementation can be used directly as the dependency.\n\n##The Case For\n\nDesign. To me one of the biggest benefits of using interfaces is the ability to direct the design and architecture of my application.\n\nObject-oriented programming is commonly defined as designing code around \"objects\" that contain data and have methods that manipulate that data. Many, including myself, have come to redefine it as\n\nInterfaces shouldn't be used as a way to identify that there are multiple implementations or even BECAUSE there are multiple implementations. Interfaces should really be thought of as Contracts. And not just contracts used by classes that depend upon them, but by their implementations as well.\n\nToo many times have I seen (and written) code, where the functionality of a dependency changes and breaks the class depending upon it. I may have changed a query and it now returns a different or altered set of data. This is due to the implementation breaking a contract in the code. Interfaces are meant to define and document expected behavior on both the implementation and\ndepending class.\n\nNow, not every class needs to have an Interface to define it. Interfaces are really only useful for boundaries of our application. For example, say we need to have state of our application to be persisted. We can implement an interface (contract) that our application can use with the knowledge that no matter the implementation, the expected result is that the data is persisted. We don't need to know how it's done, just that it gets done.\n\nBy using Interfaces as Contracts, we also get the benefit of testable code. We no longer need to be aware of the underlying behavior of a class's dependencies. We just need to make assumptions and verifications in our tests about those dependencies. This is what mocking/stubbing is used for.\n","html":"<p>I had an interesting discussion the other day with a colleague about some code I had written. He didn't understand why I had written an interface for a class when there didn't seem to be any kind of inheritance or multiple implementations. Essentially, he asked the questions \"Why can't I just use the class instead of the interface?\".</p>\n\n<p>When he asked this, I tried to come up with a good explanation, and my words failed me. This was just the way I've been doing it for so long, I couldn't adequately express why I had intuitively created an interface when I didn't have multiple implementations. I've since solidified my ideas, but before going into them, I'd like to explicitly describe the case against.</p>\n\n<h2 id=\"thecaseagainst\">The Case Against</h2>\n\n<p>The side my colleague was taking was all about the utility of the code within the application. Say we have <code>ClassA</code> which implements <code>InterfaceA</code> and <code>ClassB</code> which depends upon <code>InterfaceA</code>. In this example, <code>ClassB</code> could just depend directly upon <code>ClassA</code> and no functionality would change. The case against argues about adding additional complexity and indirection by introducing the Interface which adds nothing to the functionality of the code that needs to be executed.</p>\n\n<p>Now, let's imagine a <code>ClassC</code>, which also implemented <code>InterfaceA</code>. We no longer want to use <code>ClassA</code> at all, and want to use <code>ClassC</code>. This case argues that we can either change <code>ClassB</code> to use <code>ClassC</code> which isn't that much work to change. Or since we no longer are using <code>ClassA</code>, why not just replace the functionality of <code>ClassA</code> to be what <code>ClassC</code> is, and <code>ClassB</code> no longer has to change. Essentially, if we want <code>ClassA</code> to function like <code>ClassC</code> now, why not just change <code>ClassA</code> instead of introducing a second class.</p>\n\n<p>The crux of this argument is based upon the idea that an interface is only useful for determining the root structure of inheritance. In this case, if I want to use both <code>ClassA</code> and <code>ClassC</code> in <code>ClassB</code> there needs to be some commonality between them, so an interface is introduced. But if only one class is used during run time, there is no need for an interface, as the implementation can be used directly as the dependency.</p>\n\n<h2 id=\"thecasefor\">The Case For</h2>\n\n<p>Design. To me one of the biggest benefits of using interfaces is the ability to direct the design and architecture of my application.</p>\n\n<p>Object-oriented programming is commonly defined as designing code around \"objects\" that contain data and have methods that manipulate that data. Many, including myself, have come to redefine it as</p>\n\n<p>Interfaces shouldn't be used as a way to identify that there are multiple implementations or even BECAUSE there are multiple implementations. Interfaces should really be thought of as Contracts. And not just contracts used by classes that depend upon them, but by their implementations as well.</p>\n\n<p>Too many times have I seen (and written) code, where the functionality of a dependency changes and breaks the class depending upon it. I may have changed a query and it now returns a different or altered set of data. This is due to the implementation breaking a contract in the code. Interfaces are meant to define and document expected behavior on both the implementation and <br />\ndepending class.</p>\n\n<p>Now, not every class needs to have an Interface to define it. Interfaces are really only useful for boundaries of our application. For example, say we need to have state of our application to be persisted. We can implement an interface (contract) that our application can use with the knowledge that no matter the implementation, the expected result is that the data is persisted. We don't need to know how it's done, just that it gets done.</p>\n\n<p>By using Interfaces as Contracts, we also get the benefit of testable code. We no longer need to be aware of the underlying behavior of a class's dependencies. We just need to make assumptions and verifications in our tests about those dependencies. This is what mocking/stubbing is used for.</p>","image":null,"featured":false,"page":false,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-09-16T15:55:42.000Z","created_by":1,"updated_at":"2014-09-18T19:22:09.000Z","updated_by":1,"published_at":null,"published_by":null},{"id":18,"uuid":"4edfbdf7-2dbf-46f5-8a2e-064a8a8236e1","title":"View Composers to the Rescue","slug":"view-composers-to-the-rescue","markdown":"","html":"","image":null,"featured":false,"page":false,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-09-16T15:56:11.000Z","created_by":1,"updated_at":"2014-09-16T15:56:11.000Z","updated_by":1,"published_at":null,"published_by":null},{"id":19,"uuid":"9adcbdae-cc1f-4964-82a2-1e25a3ad0824","title":"Why Use a Framework?","slug":"why-use-a-framework","markdown":"","html":"","image":null,"featured":false,"page":false,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-09-19T13:27:08.000Z","created_by":1,"updated_at":"2014-09-19T13:27:08.000Z","updated_by":1,"published_at":null,"published_by":null},{"id":20,"uuid":"958939b6-138e-4c22-b764-4c08ebdd79ce","title":"Your Data Model Is Not Your Domain Model","slug":"your-data-model-is-not-your-domain-model","markdown":"","html":"","image":null,"featured":false,"page":false,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-09-22T16:28:02.000Z","created_by":1,"updated_at":"2014-09-22T16:28:02.000Z","updated_by":1,"published_at":null,"published_by":null},{"id":21,"uuid":"de2cf2ac-84d5-4684-a81b-f29ddb889a40","title":"Singletons","slug":"singletons","markdown":"I saw an interesting post the other day discussing whether or not Singletons are an anti-pattern. One side argued that Singletons had valid use cases and there's nothing wrong in using them, in fact they were quite useful. The other side was arguing that Singletons lead to sticky code issues, and were nothing more than global variables.\n\nI, oddly, agree with both sides. And the reason for that is the subtle difference between the Singleton Design Pattern and the Singleton Object Lifecycle.\nSingleton Design Pattern\n\nThe Singleton Design Pattern is a pattern through which a class can only be instantiated once. Below is a simple example of this design pattern in PHP.\n\n\n```\n\nclass Singleton\n{\n    private static $instance;\n    \n    public static function getInstance()\n    {\n        if (null === static::$instance) {\n            static::$instance = new static;\n        }\n        return static::$instance;\n    }\n   \n    private function __construct() { }\n}\n```\nThe combination of the private constructor, the `$instance` variable, and the public `getInstance` method provides only a single avenue for code to interact with this class. We have restricted the ability to instantiate instances, and only delegate a single instance to ever exist of this class. \n\nWhile I agree that Singletons are useful in some cases, I firmly believe that the use of the Singleton Design Pattern is in fact an anti-pattern. This is because the class is now responsible for its own lifecycle within the application. This violates the idea of Single Responsibility. By using the Singleton Design Pattern, our class is responsible for two things: its original responsibility and its creation and destruction. In addition, it is widely regarded as best practice that a class should not be responsible for instantiating its own dependencies. So it would naturally follow that a class should also not be responsible for the instantiation of itself.\n\nThe issue now is that, while we believe that the Singleton Design Pattern is a poor approach to our problem, how do we create an instance of an object that has the same lifetime of a Singleton. Accomplishing this is what I call the Singleton Object Lifecycle.\nSingleton Object Lifecycle\n\nThe Singleton Object Lifecycle is ultimately what the use of the Singleton Design Pattern provides to us: an object instance that lasts for the lifetime of the application. If you are practicing dependency inversion in your applications, you should be familiar with the concept of an Inversion of Control and Dependency Injection Containers. If you **aren’t** familiar with these terms, or their uses, you have some [homework](http://fabien.potencier.org/article/11/what-is-dependency-injection) to do.\n\nUsing a DI tool, we now have the means to instantiate an object with a Singleton Object Lifecycle that can be used in other classes as a dependency.\n\nHere’s an example of this in Laravel:\n```\nApp::singleton('Foo', function()\n{\n    return new Foo;\n});\n\nclass Bar \n{\n    public __construct(Foo $foo) { }\n}\n```\nHere, `Bar` uses `Foo` as a dependency. With Laravel’s IoC container, we state that we wish `Foo` to have a Singleton Object Lifecycle. This keeps instantiation of objects away from both the `Foo` and `Bar` classes, which is what we want. This gives us several benefits. First, `Foo` doesn’t need extra work just because we want it to have the Lifecycle of a Singleton. Second, we have a single place where we can change the lifecycle of `Foo`. Third, when we decide that we no longer want `Foo` to have a Singleton Object Lifecycle, we won’t have to muck around the internals of `Foo` to make that happen. `Foo` can remain just the way it is.\n\nUsing methods like this to control the lifecycle of objects allows us to use Singletons without having to resort to the Singleton anti-pattern. Be sure to look into your DI tool of choice to figure out how to make it work for your applications.\n","html":"<p>I saw an interesting post the other day discussing whether or not Singletons are an anti-pattern. One side argued that Singletons had valid use cases and there's nothing wrong in using them, in fact they were quite useful. The other side was arguing that Singletons lead to sticky code issues, and were nothing more than global variables.</p>\n\n<p>I, oddly, agree with both sides. And the reason for that is the subtle difference between the Singleton Design Pattern and the Singleton Object Lifecycle. <br />\nSingleton Design Pattern</p>\n\n<p>The Singleton Design Pattern is a pattern through which a class can only be instantiated once. Below is a simple example of this design pattern in PHP.</p>\n\n<pre><code>class Singleton  \n{\n    private static $instance;\n\n    public static function getInstance()\n    {\n        if (null === static::$instance) {\n            static::$instance = new static;\n        }\n        return static::$instance;\n    }\n\n    private function __construct() { }\n}\n</code></pre>\n\n<p>The combination of the private constructor, the <code>$instance</code> variable, and the public <code>getInstance</code> method provides only a single avenue for code to interact with this class. We have restricted the ability to instantiate instances, and only delegate a single instance to ever exist of this class. </p>\n\n<p>While I agree that Singletons are useful in some cases, I firmly believe that the use of the Singleton Design Pattern is in fact an anti-pattern. This is because the class is now responsible for its own lifecycle within the application. This violates the idea of Single Responsibility. By using the Singleton Design Pattern, our class is responsible for two things: its original responsibility and its creation and destruction. In addition, it is widely regarded as best practice that a class should not be responsible for instantiating its own dependencies. So it would naturally follow that a class should also not be responsible for the instantiation of itself.</p>\n\n<p>The issue now is that, while we believe that the Singleton Design Pattern is a poor approach to our problem, how do we create an instance of an object that has the same lifetime of a Singleton. Accomplishing this is what I call the Singleton Object Lifecycle. <br />\nSingleton Object Lifecycle</p>\n\n<p>The Singleton Object Lifecycle is ultimately what the use of the Singleton Design Pattern provides to us: an object instance that lasts for the lifetime of the application. If you are practicing dependency inversion in your applications, you should be familiar with the concept of an Inversion of Control and Dependency Injection Containers. If you <strong>aren’t</strong> familiar with these terms, or their uses, you have some <a href=\"http://fabien.potencier.org/article/11/what-is-dependency-injection\">homework</a> to do.</p>\n\n<p>Using a DI tool, we now have the means to instantiate an object with a Singleton Object Lifecycle that can be used in other classes as a dependency.</p>\n\n<p>Here’s an example of this in Laravel:  </p>\n\n<pre><code>App::singleton('Foo', function()  \n{\n    return new Foo;\n});\n\nclass Bar  \n{\n    public __construct(Foo $foo) { }\n}\n</code></pre>\n\n<p>Here, <code>Bar</code> uses <code>Foo</code> as a dependency. With Laravel’s IoC container, we state that we wish <code>Foo</code> to have a Singleton Object Lifecycle. This keeps instantiation of objects away from both the <code>Foo</code> and <code>Bar</code> classes, which is what we want. This gives us several benefits. First, <code>Foo</code> doesn’t need extra work just because we want it to have the Lifecycle of a Singleton. Second, we have a single place where we can change the lifecycle of <code>Foo</code>. Third, when we decide that we no longer want <code>Foo</code> to have a Singleton Object Lifecycle, we won’t have to muck around the internals of <code>Foo</code> to make that happen. <code>Foo</code> can remain just the way it is.</p>\n\n<p>Using methods like this to control the lifecycle of objects allows us to use Singletons without having to resort to the Singleton anti-pattern. Be sure to look into your DI tool of choice to figure out how to make it work for your applications.</p>","image":null,"featured":false,"page":false,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-10-25T03:50:34.000Z","created_by":1,"updated_at":"2014-10-27T20:51:19.000Z","updated_by":1,"published_at":null,"published_by":null},{"id":22,"uuid":"7bc921ee-d369-4e29-9a4c-5c91c2dd9fa6","title":"C# Properties: A Blessing and A Curse","slug":"c-properties-a-blessing-and-a-curse","markdown":"","html":"","image":null,"featured":false,"page":false,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-10-31T17:23:37.000Z","created_by":1,"updated_at":"2014-10-31T17:23:37.000Z","updated_by":1,"published_at":null,"published_by":null},{"id":23,"uuid":"9cc0643e-a194-4912-8f6c-703e50138b65","title":"Guidelines vs. Gospel","slug":"guidelines-vs-gospel","markdown":"How taking ideas as doctrine is a terrible idea.","html":"<p>How taking ideas as doctrine is a terrible idea.</p>","image":null,"featured":false,"page":false,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-11-06T20:47:41.000Z","created_by":1,"updated_at":"2014-11-06T20:47:41.000Z","updated_by":1,"published_at":null,"published_by":null},{"id":24,"uuid":"d5ce6c98-28c9-4e3d-a7bd-ce030cdc7b89","title":"Authorization with Command Bus Pattern","slug":"authorization-with-command-bus-pattern","markdown":"Authorization command bus decorator\nAuthorizedCommand defines how an action should be authorized, provides user w/ permissions\nTenantAuthorizedCommand example base Command that verifies user is performing an action for only their company in a multi-tenant application\n","html":"<p>Authorization command bus decorator <br />\nAuthorizedCommand defines how an action should be authorized, provides user w/ permissions <br />\nTenantAuthorizedCommand example base Command that verifies user is performing an action for only their company in a multi-tenant application</p>","image":null,"featured":false,"page":false,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2014-12-01T16:44:37.000Z","created_by":1,"updated_at":"2014-12-01T16:44:37.000Z","updated_by":1,"published_at":null,"published_by":null},{"id":25,"uuid":"313e9f29-d19e-4918-aba8-cb942707b623","title":"StaticShowdown 2014","slug":"staticshowdown-2014","markdown":"#My Very First Hackathon\n[Rob](https://twitter.com/politburoslucre), a classmate and good friend of mine, invited me to work with him and a few coworkers on their StaticShowdown team. He sent me the link, and I almost immediately replied yes. I'd never done a hackathon before, and this one looked especially fun, taking place over 48 hours this past weekend.\n\nStaticShowdown is a virtual hackathon where the only constraint is no backend code! Anything you can throw into a web page is fair game, and you can communicate with any service you haven't developed for the purpose of the hackathon. This means tools like Firebase, Facebook, Twitter, and any other APIs are fair game.\n\nThe idea for our app is an integration with the Facebook Events API that allows users to notify event hosts what he/she will be bringing to various events. Authentication and the events themselves would be handled by Facebook, making a lot of the data interaction fairly straightforward. We would then tie in the events to a store on Firebase, which tracks the items each user is bringing to the event. Firebase also provides excellent OAuth integration for Facebook, making authentication that much easier. \n\nWith our idea in our heads, and the tools in our hands, we began sharply at 7:00 PM. Computer humming, keyboard at the ready. And then...near full stop.\n\n#It has begun...\nStarting out was MUCH slower than I originally thought. Trying to have four people simultaneously work on something when you have a blank slate is difficult, as each will most likely go in a different direction. We knew this before we started, having decided on the technologies to use (Angular, Sass, Polymer, etc). We also decided to use Yeoman to scaffold the app. But even then, starting was slow going. Deciding who would do what when was hard. And I'm sure it was only made harder by the fact that the others were in a room in Boston, and I was in my house in Rochester, NY.\n\nBut eventually, we began making progress. We had an app structure. We had a Firebase schema. We had a homepage. We could sign in with Facebook. Piece by piece, things began to come together, and we could see an app in our sights.\n\nBy the end, we had a **mostly** functional application. It wasn't entirely finished, but we were rather proud of the progress we had made. And we had a lot of fun making it.\n\n\n#Experience Earned, Lessons Learned\nFirst and foremost, my inital reaction after finishing my first hackathon: THAT WAS AWESOME! WHEN'S THE NEXT ONE?! Of course, I had a blast. I had a great team, we had a project we thought had some great potential, and we put our best foot forward. In the end we ended up with something we were all proud of. And it was also something that could even be taken, and improved upon in the future. There's no reason this app should end with the hackathon. I also ended up learning a ton about different technologies.\n\n######Angular\nI worked Angular for the first time, which was very fun and challenging. To me, Angular was good at what it did, but left me wishing for many other features I've been used to while toying with Ember. In fact, it solidified my decision to pursue learning Ember to its fullest extent. That's not meant to be a jab at Angular, but more an acknowledgement of the capabilities I get from an Ember application.\n\n######Polymer\nAlso in that list is Polymer, the library for utilizing Web Components. While I'm used to the premise being akin to Ember Components, the behavior of Polymer elements was wildly fascinating. Polymer confused me greatly at first, but after a bit, I found immense power in those little elements. I did have a few issues/oddities with it however. I couldn't get it to play nicely with Angular's databinding, which is more a nice-to-have and not a deal breaker. I also couldn't figure out a good way to integrate it with our Gulp build pipeline. This meant any new Polymer elements would have to be included as a `link` reference, which was already a bit strange to me to begin with. \n\n#Final Thoughts\nAnyone who is even remotely interested in software development or design should consider going to at least one hackathon. It is an awesome and fun time, and I can almost certainly guarantee you will enjoy it. Be open about trying new things, learning new tools, and adopting new ideas. And be sure to build something GREAT.","html":"<h1 id=\"myveryfirsthackathon\">My Very First Hackathon</h1>\n\n<p><a href=\"https://twitter.com/politburoslucre\">Rob</a>, a classmate and good friend of mine, invited me to work with him and a few coworkers on their StaticShowdown team. He sent me the link, and I almost immediately replied yes. I'd never done a hackathon before, and this one looked especially fun, taking place over 48 hours this past weekend.</p>\n\n<p>StaticShowdown is a virtual hackathon where the only constraint is no backend code! Anything you can throw into a web page is fair game, and you can communicate with any service you haven't developed for the purpose of the hackathon. This means tools like Firebase, Facebook, Twitter, and any other APIs are fair game.</p>\n\n<p>The idea for our app is an integration with the Facebook Events API that allows users to notify event hosts what he/she will be bringing to various events. Authentication and the events themselves would be handled by Facebook, making a lot of the data interaction fairly straightforward. We would then tie in the events to a store on Firebase, which tracks the items each user is bringing to the event. Firebase also provides excellent OAuth integration for Facebook, making authentication that much easier. </p>\n\n<p>With our idea in our heads, and the tools in our hands, we began sharply at 7:00 PM. Computer humming, keyboard at the ready. And then...near full stop.</p>\n\n<h1 id=\"ithasbegun\">It has begun...</h1>\n\n<p>Starting out was MUCH slower than I originally thought. Trying to have four people simultaneously work on something when you have a blank slate is difficult, as each will most likely go in a different direction. We knew this before we started, having decided on the technologies to use (Angular, Sass, Polymer, etc). We also decided to use Yeoman to scaffold the app. But even then, starting was slow going. Deciding who would do what when was hard. And I'm sure it was only made harder by the fact that the others were in a room in Boston, and I was in my house in Rochester, NY.</p>\n\n<p>But eventually, we began making progress. We had an app structure. We had a Firebase schema. We had a homepage. We could sign in with Facebook. Piece by piece, things began to come together, and we could see an app in our sights.</p>\n\n<p>By the end, we had a <strong>mostly</strong> functional application. It wasn't entirely finished, but we were rather proud of the progress we had made. And we had a lot of fun making it.</p>\n\n<h1 id=\"experienceearnedlessonslearned\">Experience Earned, Lessons Learned</h1>\n\n<p>First and foremost, my inital reaction after finishing my first hackathon: THAT WAS AWESOME! WHEN'S THE NEXT ONE?! Of course, I had a blast. I had a great team, we had a project we thought had some great potential, and we put our best foot forward. In the end we ended up with something we were all proud of. And it was also something that could even be taken, and improved upon in the future. There's no reason this app should end with the hackathon. I also ended up learning a ton about different technologies.</p>\n\n<h6 id=\"angular\">Angular</h6>\n\n<p>I worked Angular for the first time, which was very fun and challenging. To me, Angular was good at what it did, but left me wishing for many other features I've been used to while toying with Ember. In fact, it solidified my decision to pursue learning Ember to its fullest extent. That's not meant to be a jab at Angular, but more an acknowledgement of the capabilities I get from an Ember application.</p>\n\n<h6 id=\"polymer\">Polymer</h6>\n\n<p>Also in that list is Polymer, the library for utilizing Web Components. While I'm used to the premise being akin to Ember Components, the behavior of Polymer elements was wildly fascinating. Polymer confused me greatly at first, but after a bit, I found immense power in those little elements. I did have a few issues/oddities with it however. I couldn't get it to play nicely with Angular's databinding, which is more a nice-to-have and not a deal breaker. I also couldn't figure out a good way to integrate it with our Gulp build pipeline. This meant any new Polymer elements would have to be included as a <code>link</code> reference, which was already a bit strange to me to begin with. </p>\n\n<h1 id=\"finalthoughts\">Final Thoughts</h1>\n\n<p>Anyone who is even remotely interested in software development or design should consider going to at least one hackathon. It is an awesome and fun time, and I can almost certainly guarantee you will enjoy it. Be open about trying new things, learning new tools, and adopting new ideas. And be sure to build something GREAT.</p>","image":null,"featured":false,"page":false,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2015-01-25T03:45:31.006Z","created_by":1,"updated_at":"2015-02-07T18:58:03.227Z","updated_by":1,"published_at":"2015-01-29T04:01:04.225Z","published_by":1},{"id":26,"uuid":"7de722d4-78f0-4e20-9f08-5a4ea2f680cc","title":"Type hints","slug":"type-hints","markdown":"type hints are really good...for dependency injection tools","html":"<p>type hints are really good...for dependency injection tools</p>","image":null,"featured":false,"page":false,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2015-02-25T19:24:31.239Z","created_by":1,"updated_at":"2015-02-25T19:24:45.364Z","updated_by":1,"published_at":null,"published_by":null},{"id":29,"uuid":"4b810783-bcaf-4171-8b1d-ba98a57c409b","title":"Small Steps from Legacy to Laravel","slug":"small-steps-from-legacy-to-laravel","markdown":"Legacy apps. Nasty spaghetti code that you can just never seem to cleanup. Every time you touch the codebase, you think to yourself \"I wish I could just rewrite this thing from scratch using a framework, like Symfony or Laravel\".\n\nRewrites are hard. Trust me, I've tried them. Sometimes I've succeeded. Sometimes I haven't. But incremental refactoring of a legacy system can seem so daunting a task, that sometimes the rewrite using a fully-featured framework seems too enticing to pass up.\n\nWhat I'm going to detail is how I arrived at the best of both worlds. Step by step, I refactored my legacy system into what the app would have been like if I'd written it starting with Laravel. Module by module, I incorporated Illuminate libraries into the code until it was structured and behaved like a Laravel app.\n\n###### Step #1: Bumping the PHP Version\n\nI wanted this to be the first thing I did for two main reasons:\n\n* The version of PHP running on the server has been EOL for over 2 years\n* I needed to use composer, and that required a newer version of PHP\n\nJumping a few minor versions in PHP only had one *real* snag, and that was SQL Server extensions.\n\nThis app was running on IIS and connected to a SQL Server database (it was like that when I got here). For PHP versions older than 5.3, the `mssql` extension was used for database calls. However, all versions after that used the newer `sqlsrv` extension. \n\nI performed some regex-foo to find and replace all of the calls to the newer version","html":"<p>Legacy apps. Nasty spaghetti code that you can just never seem to cleanup. Every time you touch the codebase, you think to yourself \"I wish I could just rewrite this thing from scratch using a framework, like Symfony or Laravel\".</p>\n\n<p>Rewrites are hard. Trust me, I've tried them. Sometimes I've succeeded. Sometimes I haven't. But incremental refactoring of a legacy system can seem so daunting a task, that sometimes the rewrite using a fully-featured framework seems too enticing to pass up.</p>\n\n<p>What I'm going to detail is how I arrived at the best of both worlds. Step by step, I refactored my legacy system into what the app would have been like if I'd written it starting with Laravel. Module by module, I incorporated Illuminate libraries into the code until it was structured and behaved like a Laravel app.</p>\n\n<h6 id=\"step1bumpingthephpversion\">Step #1: Bumping the PHP Version</h6>\n\n<p>I wanted this to be the first thing I did for two main reasons:</p>\n\n<ul>\n<li>The version of PHP running on the server has been EOL for over 2 years</li>\n<li>I needed to use composer, and that required a newer version of PHP</li>\n</ul>\n\n<p>Jumping a few minor versions in PHP only had one <em>real</em> snag, and that was SQL Server extensions.</p>\n\n<p>This app was running on IIS and connected to a SQL Server database (it was like that when I got here). For PHP versions older than 5.3, the <code>mssql</code> extension was used for database calls. However, all versions after that used the newer <code>sqlsrv</code> extension. </p>\n\n<p>I performed some regex-foo to find and replace all of the calls to the newer version</p>","image":null,"featured":false,"page":false,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2016-04-20T17:04:20.421Z","created_by":1,"updated_at":"2016-04-20T18:03:10.141Z","updated_by":1,"published_at":null,"published_by":null},{"id":30,"uuid":"853bf4f5-7a9d-4a83-9d58-161e3a01a015","title":"Uploading Files through Sitefinity's Web API","slug":"uploading-files-through-sitefinitys-web-api","markdown":"","html":"","image":null,"featured":false,"page":false,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2017-05-22T12:37:36.807Z","created_by":1,"updated_at":"2017-05-22T12:37:40.023Z","updated_by":1,"published_at":null,"published_by":null},{"id":28,"uuid":"b837745d-05d0-4f0c-9565-d5ad756f5674","title":"You've been upgraded to the latest version of Ghost","slug":"ghost-0-7","markdown":"You've just upgraded to the latest version of Ghost and we've made a few changes that you should probably know about!\n\n## Woah, why does everything look different?\n\nAfter two years and hundreds of thousands of users, we learned a great deal about what was (and wasn't) working in the old Ghost admin user interface. What you're looking at is Ghost's first major UI refresh, with a strong focus on being more usable and robust all round.\n\n![New Design](https://ghost.org/images/zelda.png)\n\nThe main navigation menu, previously located at the top of your screen, has now moved over to the left. This makes it way easier to work with on mobile devices, and has the added benefit of providing ample space for upcoming features!\n\n## Lost and found: Your old posts\n\nFrom talking to many of you we understand that finding old posts in the admin area was a real pain; so we've added a new magical search bar which lets you quickly find posts for editing, without having to scroll endlessly. Take it for a spin!\n\n![Search](https://ghost.org/images/search.gif)\n\nQuestions? Comments? Send us a tweet [@TryGhost](https://twitter.com/tryghost)\n\nOh, and yes – you can safely delete this draft post!","html":"<p>You've just upgraded to the latest version of Ghost and we've made a few changes that you should probably know about!</p>\n\n<h2 id=\"woahwhydoeseverythinglookdifferent\">Woah, why does everything look different?</h2>\n\n<p>After two years and hundreds of thousands of users, we learned a great deal about what was (and wasn't) working in the old Ghost admin user interface. What you're looking at is Ghost's first major UI refresh, with a strong focus on being more usable and robust all round.</p>\n\n<p><img src=\"https://ghost.org/images/zelda.png\" alt=\"New Design\" /></p>\n\n<p>The main navigation menu, previously located at the top of your screen, has now moved over to the left. This makes it way easier to work with on mobile devices, and has the added benefit of providing ample space for upcoming features!</p>\n\n<h2 id=\"lostandfoundyouroldposts\">Lost and found: Your old posts</h2>\n\n<p>From talking to many of you we understand that finding old posts in the admin area was a real pain; so we've added a new magical search bar which lets you quickly find posts for editing, without having to scroll endlessly. Take it for a spin!</p>\n\n<p><img src=\"https://ghost.org/images/search.gif\" alt=\"Search\" /></p>\n\n<p>Questions? Comments? Send us a tweet <a href=\"https://twitter.com/tryghost\">@TryGhost</a></p>\n\n<p>Oh, and yes – you can safely delete this draft post!</p>","image":null,"featured":false,"page":false,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"2015-12-12T02:43:33.502Z","created_by":1,"updated_at":"2018-11-02T16:58:34.410Z","updated_by":1,"published_at":"2015-12-12T02:43:33.501Z","published_by":null}],"posts_tags":[{"id":2,"post_id":2,"tag_id":5,"sort_order":0},{"id":3,"post_id":2,"tag_id":6,"sort_order":1},{"id":4,"post_id":2,"tag_id":7,"sort_order":2},{"id":5,"post_id":3,"tag_id":4,"sort_order":0},{"id":6,"post_id":3,"tag_id":5,"sort_order":1},{"id":7,"post_id":4,"tag_id":2,"sort_order":0},{"id":8,"post_id":4,"tag_id":3,"sort_order":1},{"id":9,"post_id":4,"tag_id":4,"sort_order":2},{"id":10,"post_id":5,"tag_id":8,"sort_order":0},{"id":11,"post_id":5,"tag_id":9,"sort_order":1},{"id":12,"post_id":5,"tag_id":10,"sort_order":2},{"id":13,"post_id":6,"tag_id":6,"sort_order":0},{"id":14,"post_id":6,"tag_id":8,"sort_order":1},{"id":15,"post_id":6,"tag_id":9,"sort_order":2},{"id":16,"post_id":7,"tag_id":9,"sort_order":0},{"id":17,"post_id":7,"tag_id":11,"sort_order":1},{"id":18,"post_id":8,"tag_id":5,"sort_order":0},{"id":19,"post_id":8,"tag_id":12,"sort_order":1},{"id":20,"post_id":8,"tag_id":13,"sort_order":2},{"id":21,"post_id":8,"tag_id":14,"sort_order":3},{"id":22,"post_id":9,"tag_id":5,"sort_order":0},{"id":23,"post_id":9,"tag_id":6,"sort_order":1},{"id":24,"post_id":9,"tag_id":15,"sort_order":2},{"id":25,"post_id":10,"tag_id":6,"sort_order":0},{"id":26,"post_id":10,"tag_id":16,"sort_order":1},{"id":27,"post_id":10,"tag_id":17,"sort_order":2},{"id":28,"post_id":10,"tag_id":18,"sort_order":3},{"id":29,"post_id":10,"tag_id":19,"sort_order":4},{"id":30,"post_id":13,"tag_id":20,"sort_order":0},{"id":31,"post_id":13,"tag_id":21,"sort_order":1},{"id":32,"post_id":13,"tag_id":22,"sort_order":2},{"id":33,"post_id":14,"tag_id":6,"sort_order":0},{"id":34,"post_id":14,"tag_id":22,"sort_order":1},{"id":35,"post_id":14,"tag_id":23,"sort_order":2},{"id":36,"post_id":14,"tag_id":24,"sort_order":3},{"id":37,"post_id":15,"tag_id":5,"sort_order":0},{"id":38,"post_id":15,"tag_id":6,"sort_order":1},{"id":39,"post_id":15,"tag_id":23,"sort_order":2},{"id":40,"post_id":15,"tag_id":24,"sort_order":3},{"id":118,"post_id":25,"tag_id":25,"sort_order":0},{"id":119,"post_id":25,"tag_id":26,"sort_order":1},{"id":120,"post_id":25,"tag_id":27,"sort_order":2},{"id":121,"post_id":25,"tag_id":28,"sort_order":3},{"id":122,"post_id":25,"tag_id":29,"sort_order":4},{"id":123,"post_id":25,"tag_id":30,"sort_order":5},{"id":124,"post_id":25,"tag_id":31,"sort_order":6},{"id":127,"post_id":27,"tag_id":4,"sort_order":0},{"id":128,"post_id":27,"tag_id":5,"sort_order":1}],"permissions":[{"id":1,"uuid":"e43f27c8-b457-4c37-af02-527decc94b09","name":"Export database","object_type":"db","action_type":"exportContent","object_id":null,"created_at":"2015-01-06T04:12:31.387Z","created_by":1,"updated_at":"2015-01-06T04:12:31.387Z","updated_by":1},{"id":2,"uuid":"71e7b016-d7e6-42a9-89eb-ffb7dd94091b","name":"Import database","object_type":"db","action_type":"importContent","object_id":null,"created_at":"2015-01-06T04:12:31.399Z","created_by":1,"updated_at":"2015-01-06T04:12:31.399Z","updated_by":1},{"id":3,"uuid":"b477313d-1840-40fc-84cc-6920ed0089b9","name":"Delete all content","object_type":"db","action_type":"deleteAllContent","object_id":null,"created_at":"2015-01-06T04:12:31.412Z","created_by":1,"updated_at":"2015-01-06T04:12:31.412Z","updated_by":1},{"id":4,"uuid":"0e7485d0-d258-42ab-970a-1fb6a13e1c7d","name":"Send mail","object_type":"mail","action_type":"send","object_id":null,"created_at":"2015-01-06T04:12:31.424Z","created_by":1,"updated_at":"2015-01-06T04:12:31.424Z","updated_by":1},{"id":5,"uuid":"55f6775c-5d67-42fb-8fd6-1faf03a4e1ab","name":"Browse notifications","object_type":"notification","action_type":"browse","object_id":null,"created_at":"2015-01-06T04:12:31.434Z","created_by":1,"updated_at":"2015-01-06T04:12:31.434Z","updated_by":1},{"id":6,"uuid":"e2249dc5-dd06-4323-8584-0d6ae8a58cbe","name":"Add notifications","object_type":"notification","action_type":"add","object_id":null,"created_at":"2015-01-06T04:12:31.444Z","created_by":1,"updated_at":"2015-01-06T04:12:31.444Z","updated_by":1},{"id":7,"uuid":"13231620-ed30-430c-9962-0cc8274125e0","name":"Delete notifications","object_type":"notification","action_type":"destroy","object_id":null,"created_at":"2015-01-06T04:12:31.453Z","created_by":1,"updated_at":"2015-01-06T04:12:31.453Z","updated_by":1},{"id":8,"uuid":"cfa66ef3-8fb2-4619-9fa4-9ec7ab6581cb","name":"Browse posts","object_type":"post","action_type":"browse","object_id":null,"created_at":"2015-01-06T04:12:31.465Z","created_by":1,"updated_at":"2015-01-06T04:12:31.465Z","updated_by":1},{"id":9,"uuid":"f68951ed-5655-4fba-bcad-c62df0f2489f","name":"Read posts","object_type":"post","action_type":"read","object_id":null,"created_at":"2015-01-06T04:12:31.474Z","created_by":1,"updated_at":"2015-01-06T04:12:31.474Z","updated_by":1},{"id":10,"uuid":"39cb3eda-7e68-46b3-9170-272d3d3e2e92","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":"2015-01-06T04:12:31.489Z","created_by":1,"updated_at":"2015-01-06T04:12:31.489Z","updated_by":1},{"id":11,"uuid":"2f89417e-70ce-45e8-a85d-a9d63b684fe0","name":"Add posts","object_type":"post","action_type":"add","object_id":null,"created_at":"2015-01-06T04:12:31.494Z","created_by":1,"updated_at":"2015-01-06T04:12:31.494Z","updated_by":1},{"id":12,"uuid":"627efb15-1d0f-40f7-9295-1a278680233e","name":"Delete posts","object_type":"post","action_type":"destroy","object_id":null,"created_at":"2015-01-06T04:12:31.504Z","created_by":1,"updated_at":"2015-01-06T04:12:31.504Z","updated_by":1},{"id":13,"uuid":"4e7ccbfc-1668-4e53-8c26-51a88c01f23e","name":"Browse settings","object_type":"setting","action_type":"browse","object_id":null,"created_at":"2015-01-06T04:12:31.510Z","created_by":1,"updated_at":"2015-01-06T04:12:31.510Z","updated_by":1},{"id":14,"uuid":"bdd2ccf9-c022-418d-a181-ae7e0ef85f04","name":"Read settings","object_type":"setting","action_type":"read","object_id":null,"created_at":"2015-01-06T04:12:31.516Z","created_by":1,"updated_at":"2015-01-06T04:12:31.516Z","updated_by":1},{"id":15,"uuid":"d75c825a-2029-4ce1-a3fa-f4dfa78313b1","name":"Edit settings","object_type":"setting","action_type":"edit","object_id":null,"created_at":"2015-01-06T04:12:31.520Z","created_by":1,"updated_at":"2015-01-06T04:12:31.520Z","updated_by":1},{"id":16,"uuid":"655ad58d-a29f-43aa-bbbc-fc4a9b30a420","name":"Generate slugs","object_type":"slug","action_type":"generate","object_id":null,"created_at":"2015-01-06T04:12:31.529Z","created_by":1,"updated_at":"2015-01-06T04:12:31.529Z","updated_by":1},{"id":17,"uuid":"379e114f-3f07-42f8-a73d-7d2c808c2d73","name":"Browse tags","object_type":"tag","action_type":"browse","object_id":null,"created_at":"2015-01-06T04:12:31.534Z","created_by":1,"updated_at":"2015-01-06T04:12:31.534Z","updated_by":1},{"id":18,"uuid":"4b919191-8d0a-40c6-bb33-eb15142de9c4","name":"Read tags","object_type":"tag","action_type":"read","object_id":null,"created_at":"2015-01-06T04:12:31.548Z","created_by":1,"updated_at":"2015-01-06T04:12:31.548Z","updated_by":1},{"id":19,"uuid":"38dbf21b-d9e6-4173-bb57-42a1474798d9","name":"Edit tags","object_type":"tag","action_type":"edit","object_id":null,"created_at":"2015-01-06T04:12:31.552Z","created_by":1,"updated_at":"2015-01-06T04:12:31.552Z","updated_by":1},{"id":20,"uuid":"425b3347-8cf6-4141-b8a0-f166da225a03","name":"Add tags","object_type":"tag","action_type":"add","object_id":null,"created_at":"2015-01-06T04:12:31.564Z","created_by":1,"updated_at":"2015-01-06T04:12:31.564Z","updated_by":1},{"id":21,"uuid":"aa822e04-e504-4e08-86fc-9b0e26ebca6e","name":"Delete tags","object_type":"tag","action_type":"destroy","object_id":null,"created_at":"2015-01-06T04:12:31.568Z","created_by":1,"updated_at":"2015-01-06T04:12:31.568Z","updated_by":1},{"id":22,"uuid":"f89e09b6-1e72-4435-9ca6-1f7d94803ba8","name":"Browse themes","object_type":"theme","action_type":"browse","object_id":null,"created_at":"2015-01-06T04:12:31.571Z","created_by":1,"updated_at":"2015-01-06T04:12:31.571Z","updated_by":1},{"id":23,"uuid":"649fb361-faef-4740-8d53-d76846ebf31e","name":"Edit themes","object_type":"theme","action_type":"edit","object_id":null,"created_at":"2015-01-06T04:12:31.579Z","created_by":1,"updated_at":"2015-01-06T04:12:31.579Z","updated_by":1},{"id":24,"uuid":"3613c981-ef5d-4fd0-a765-1fda97234c80","name":"Browse users","object_type":"user","action_type":"browse","object_id":null,"created_at":"2015-01-06T04:12:31.584Z","created_by":1,"updated_at":"2015-01-06T04:12:31.584Z","updated_by":1},{"id":25,"uuid":"b2d5bc00-9a27-4020-b9af-d02801445c47","name":"Read users","object_type":"user","action_type":"read","object_id":null,"created_at":"2015-01-06T04:12:31.588Z","created_by":1,"updated_at":"2015-01-06T04:12:31.588Z","updated_by":1},{"id":26,"uuid":"baff9feb-446e-40ec-ab6a-b2cbbfc1f32f","name":"Edit users","object_type":"user","action_type":"edit","object_id":null,"created_at":"2015-01-06T04:12:31.594Z","created_by":1,"updated_at":"2015-01-06T04:12:31.594Z","updated_by":1},{"id":27,"uuid":"5faf4ef1-fc8b-4f49-8938-997da99327ab","name":"Add users","object_type":"user","action_type":"add","object_id":null,"created_at":"2015-01-06T04:12:31.598Z","created_by":1,"updated_at":"2015-01-06T04:12:31.598Z","updated_by":1},{"id":28,"uuid":"c21a533b-c83a-41b5-bb19-eb28c289db7f","name":"Delete users","object_type":"user","action_type":"destroy","object_id":null,"created_at":"2015-01-06T04:12:31.604Z","created_by":1,"updated_at":"2015-01-06T04:12:31.604Z","updated_by":1},{"id":29,"uuid":"64fdb7d1-4e4d-4743-9878-922bce580479","name":"Assign a role","object_type":"role","action_type":"assign","object_id":null,"created_at":"2015-01-06T04:12:31.612Z","created_by":1,"updated_at":"2015-01-06T04:12:31.612Z","updated_by":1},{"id":30,"uuid":"49ef49bb-a3e0-45e3-9dfc-e9e99e2472ad","name":"Browse roles","object_type":"role","action_type":"browse","object_id":null,"created_at":"2015-01-06T04:12:31.616Z","created_by":1,"updated_at":"2015-01-06T04:12:31.616Z","updated_by":1}],"permissions_apps":[],"permissions_roles":[{"id":1,"role_id":1,"permission_id":1},{"id":2,"role_id":1,"permission_id":2},{"id":3,"role_id":1,"permission_id":3},{"id":4,"role_id":1,"permission_id":4},{"id":5,"role_id":1,"permission_id":5},{"id":6,"role_id":1,"permission_id":6},{"id":7,"role_id":1,"permission_id":7},{"id":8,"role_id":1,"permission_id":8},{"id":9,"role_id":1,"permission_id":9},{"id":10,"role_id":1,"permission_id":10},{"id":11,"role_id":1,"permission_id":11},{"id":12,"role_id":1,"permission_id":12},{"id":13,"role_id":1,"permission_id":13},{"id":14,"role_id":1,"permission_id":14},{"id":15,"role_id":1,"permission_id":15},{"id":16,"role_id":1,"permission_id":16},{"id":17,"role_id":1,"permission_id":17},{"id":18,"role_id":1,"permission_id":18},{"id":19,"role_id":1,"permission_id":19},{"id":20,"role_id":1,"permission_id":20},{"id":21,"role_id":1,"permission_id":21},{"id":22,"role_id":1,"permission_id":22},{"id":23,"role_id":1,"permission_id":23},{"id":24,"role_id":1,"permission_id":24},{"id":25,"role_id":1,"permission_id":25},{"id":26,"role_id":1,"permission_id":26},{"id":27,"role_id":1,"permission_id":27},{"id":28,"role_id":1,"permission_id":28},{"id":29,"role_id":1,"permission_id":29},{"id":30,"role_id":1,"permission_id":30},{"id":31,"role_id":3,"permission_id":8},{"id":32,"role_id":3,"permission_id":9},{"id":33,"role_id":3,"permission_id":10},{"id":34,"role_id":3,"permission_id":11},{"id":35,"role_id":3,"permission_id":12},{"id":36,"role_id":3,"permission_id":13},{"id":37,"role_id":3,"permission_id":14},{"id":38,"role_id":3,"permission_id":16},{"id":39,"role_id":3,"permission_id":17},{"id":40,"role_id":3,"permission_id":18},{"id":41,"role_id":3,"permission_id":19},{"id":42,"role_id":3,"permission_id":20},{"id":43,"role_id":3,"permission_id":21},{"id":44,"role_id":3,"permission_id":24},{"id":45,"role_id":3,"permission_id":25},{"id":46,"role_id":3,"permission_id":26},{"id":47,"role_id":3,"permission_id":27},{"id":48,"role_id":3,"permission_id":28},{"id":49,"role_id":3,"permission_id":29},{"id":50,"role_id":3,"permission_id":30},{"id":51,"role_id":2,"permission_id":8},{"id":52,"role_id":2,"permission_id":9},{"id":53,"role_id":2,"permission_id":11},{"id":54,"role_id":2,"permission_id":13},{"id":55,"role_id":2,"permission_id":14},{"id":56,"role_id":2,"permission_id":16},{"id":57,"role_id":2,"permission_id":17},{"id":58,"role_id":2,"permission_id":18},{"id":59,"role_id":2,"permission_id":20},{"id":60,"role_id":2,"permission_id":24},{"id":61,"role_id":2,"permission_id":25},{"id":62,"role_id":2,"permission_id":30}],"permissions_users":[],"roles":[{"id":1,"uuid":"5850cde3-10b9-4360-9b97-d21acbeb9836","name":"Administrator","description":"Administrators","created_at":"2015-01-06T04:12:31.219Z","created_by":1,"updated_at":"2015-01-06T04:12:31.219Z","updated_by":1},{"id":2,"uuid":"3daaa502-1f6b-41eb-8f98-1821a98de1a9","name":"Author","description":"Authors","created_at":"2015-01-06T04:12:31.220Z","created_by":1,"updated_at":"2015-01-06T04:12:31.220Z","updated_by":1},{"id":3,"uuid":"9f0a578d-2ff7-43dd-bf32-b3ce50f9f7af","name":"Editor","description":"Editors","created_at":"2015-01-06T04:12:31.219Z","created_by":1,"updated_at":"2015-01-06T04:12:31.219Z","updated_by":1},{"id":4,"uuid":"1e1269fb-75fd-4bb9-ab3a-01d5f4c3c355","name":"Owner","description":"Blog Owner","created_at":"2015-01-06T04:12:31.220Z","created_by":1,"updated_at":"2015-01-06T04:12:31.220Z","updated_by":1}],"roles_users":[{"id":1,"role_id":4,"user_id":1}],"settings":[{"id":2,"uuid":"1ca35ee4-3887-4d10-b34f-50d08288b381","key":"dbHash","value":"a844b669-8873-4711-9d1b-898d0a0da0d6","type":"core","created_at":"2015-01-06T04:12:32.526Z","created_by":1,"updated_at":"2015-01-06T04:12:32.609Z","updated_by":1},{"id":16,"uuid":"3ff15717-4daa-4e29-86e0-94b7b7c557a3","key":"activeApps","value":"[]","type":"app","created_at":"2015-01-06T04:12:32.532Z","created_by":1,"updated_at":"2015-01-06T04:30:28.014Z","updated_by":1},{"id":7,"uuid":"43c28f42-4c5d-4407-962e-888e77a6d422","key":"email","value":"jpbetley@gmail.com","type":"blog","created_at":"2015-01-06T04:12:32.529Z","created_by":1,"updated_at":"2015-04-15T00:46:56.013Z","updated_by":1},{"id":1,"uuid":"c76df74a-4bf2-4cba-9616-f710e0704165","key":"databaseVersion","value":"004","type":"core","created_at":"2015-01-06T04:12:32.520Z","created_by":1,"updated_at":"2015-01-06T04:12:32.520Z","updated_by":1},{"id":21,"uuid":"ad4fc51a-6f16-4b3e-b9d0-02f4485ef57d","key":"isPrivate","value":"false","type":"private","created_at":"2015-12-12T02:43:33.084Z","created_by":1,"updated_at":"2016-04-20T18:03:45.074Z","updated_by":1},{"id":22,"uuid":"21e11c22-d23f-447a-a10c-64fb896dad17","key":"password","value":"","type":"private","created_at":"2015-12-12T02:43:33.084Z","created_by":1,"updated_at":"2016-04-20T18:03:45.074Z","updated_by":1},{"id":14,"uuid":"d88721a3-1fd0-4011-8cd8-6ef486e61234","key":"ghost_head","value":"","type":"blog","created_at":"2015-01-06T04:12:32.531Z","created_by":1,"updated_at":"2016-04-20T18:03:45.043Z","updated_by":1},{"id":5,"uuid":"0c513d74-3aec-49ae-b76e-695042d8a327","key":"title","value":"I'm Phil Betley","type":"blog","created_at":"2015-01-06T04:12:32.528Z","created_by":1,"updated_at":"2016-04-20T18:03:45.043Z","updated_by":1},{"id":6,"uuid":"aa7a1502-5ff8-4ace-9293-268dec0c79ea","key":"description","value":"And these are the ramblings of a web developer","type":"blog","created_at":"2015-01-06T04:12:32.529Z","created_by":1,"updated_at":"2016-04-20T18:03:45.044Z","updated_by":1},{"id":8,"uuid":"9a9a0892-a680-48b9-a42b-31a229e7d3f6","key":"logo","value":"","type":"blog","created_at":"2015-01-06T04:12:32.529Z","created_by":1,"updated_at":"2016-04-20T18:03:45.044Z","updated_by":1},{"id":9,"uuid":"73b87053-8363-465c-ac37-6bc10b3c2df7","key":"cover","value":"","type":"blog","created_at":"2015-01-06T04:12:32.529Z","created_by":1,"updated_at":"2016-04-20T18:03:45.044Z","updated_by":1},{"id":10,"uuid":"f30b361e-8935-4edb-a0dc-c7c508139c1f","key":"defaultLang","value":"en_US","type":"blog","created_at":"2015-01-06T04:12:32.530Z","created_by":1,"updated_at":"2016-04-20T18:03:45.044Z","updated_by":1},{"id":11,"uuid":"38950a1f-0b37-4da2-bee3-e0197e3650de","key":"postsPerPage","value":"5","type":"blog","created_at":"2015-01-06T04:12:32.531Z","created_by":1,"updated_at":"2016-04-20T18:03:45.045Z","updated_by":1},{"id":12,"uuid":"703cecf9-ada9-4de1-bfa3-0e3585151b8c","key":"forceI18n","value":"true","type":"blog","created_at":"2015-01-06T04:12:32.531Z","created_by":1,"updated_at":"2016-04-20T18:03:45.045Z","updated_by":1},{"id":13,"uuid":"15dcc5fe-af81-41a5-8f73-2fdc4a39267f","key":"permalinks","value":"/:slug/","type":"blog","created_at":"2015-01-06T04:12:32.531Z","created_by":1,"updated_at":"2016-04-20T18:03:45.045Z","updated_by":1},{"id":18,"uuid":"d58d5925-af22-4a6c-9bb4-760b6953b22e","key":"activeTheme","value":"casper","type":"theme","created_at":"2015-01-06T04:12:32.532Z","created_by":1,"updated_at":"2016-04-20T18:03:45.062Z","updated_by":1},{"id":15,"uuid":"160ecd66-5e76-43fb-bb87-250fcb56864a","key":"ghost_foot","value":"<script>\n  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n\n  ga('create', 'UA-28578406-2', 'auto');\n  ga('send', 'pageview');\n\n</script>","type":"blog","created_at":"2015-01-06T04:12:32.532Z","created_by":1,"updated_at":"2016-04-20T18:03:45.073Z","updated_by":1},{"id":19,"uuid":"8bcf9c08-e984-4c25-b0c0-e071b5309fec","key":"labs","value":"{}","type":"blog","created_at":"2015-12-12T02:43:33.082Z","created_by":1,"updated_at":"2016-04-20T18:03:45.073Z","updated_by":1},{"id":20,"uuid":"96aeedb5-1abb-4159-b1b7-3ae4642beb12","key":"navigation","value":"[{\"label\":\"Home\",\"url\":\"/\"},{\"label\":\"GitHub\",\"url\":\"https://github.com/jpbetley\"},{\"label\":\"Twitter\",\"url\":\"https://twitter.com/jpbetley\"}]","type":"blog","created_at":"2015-12-12T02:43:33.084Z","created_by":1,"updated_at":"2016-04-20T18:03:45.073Z","updated_by":1},{"id":17,"uuid":"ff734085-8c96-49d1-8680-480416cf6631","key":"installedApps","value":"[]","type":"app","created_at":"2015-01-06T04:12:32.532Z","created_by":1,"updated_at":"2018-08-18T10:14:48.431Z","updated_by":1},{"id":3,"uuid":"bf16d10d-2e81-4410-8a23-6b4c81bb013d","key":"nextUpdateCheck","value":"1541264293","type":"core","created_at":"2015-01-06T04:12:32.527Z","created_by":1,"updated_at":"2018-11-02T16:58:12.649Z","updated_by":1},{"id":4,"uuid":"f942ac6d-3952-414a-9c69-632e26670c38","key":"displayUpdateNotification","value":"0.11.13","type":"core","created_at":"2015-01-06T04:12:32.528Z","created_by":1,"updated_at":"2018-11-02T16:58:12.657Z","updated_by":1}],"tags":[{"id":1,"uuid":"881083a1-5d8c-475e-aaad-fa3dafc6b352","name":"Getting Started","slug":"getting-started","description":null,"image":null,"hidden":false,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-01-06T04:12:31.217Z","created_by":1,"updated_at":"2015-01-06T04:12:31.217Z","updated_by":1},{"id":2,"uuid":"9754e8f8-34e6-4d57-94ec-213c2c022320","name":".net","slug":"-net","description":null,"image":null,"hidden":false,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-01-06T04:30:27.469Z","created_by":1,"updated_at":"2015-01-06T04:30:27.469Z","updated_by":1},{"id":3,"uuid":"30537d1d-da57-4893-8f4d-f1bbc3f8a2d2","name":"c-sharp","slug":"c-sharp","description":null,"image":null,"hidden":false,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-01-06T04:30:27.471Z","created_by":1,"updated_at":"2015-01-06T04:30:27.471Z","updated_by":1},{"id":4,"uuid":"ec19f8ac-e17c-44bc-b456-7cb68bb71dae","name":"testing","slug":"testing","description":null,"image":null,"hidden":false,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-01-06T04:30:27.473Z","created_by":1,"updated_at":"2015-01-06T04:30:27.473Z","updated_by":1},{"id":5,"uuid":"eafa8e70-9299-4611-89d9-c5ff7701835f","name":"php","slug":"php","description":null,"image":null,"hidden":false,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-01-06T04:30:27.474Z","created_by":1,"updated_at":"2015-01-06T04:30:27.474Z","updated_by":1},{"id":6,"uuid":"82386ef4-2911-49d2-af21-3322d39fa574","name":"laravel","slug":"laravel","description":null,"image":null,"hidden":false,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-01-06T04:30:27.476Z","created_by":1,"updated_at":"2015-01-06T04:30:27.476Z","updated_by":1},{"id":7,"uuid":"34e507f9-418c-4c1b-afdb-218ef52dc3e3","name":"patterns","slug":"patterns","description":null,"image":null,"hidden":false,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-01-06T04:30:27.478Z","created_by":1,"updated_at":"2015-01-06T04:30:27.478Z","updated_by":1},{"id":8,"uuid":"a0a0830e-cdd4-4e27-a6c2-ff3425fb2013","name":"forge","slug":"forge","description":null,"image":null,"hidden":false,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-01-06T04:30:27.479Z","created_by":1,"updated_at":"2015-01-06T04:30:27.479Z","updated_by":1},{"id":9,"uuid":"82dc83c2-e457-41b5-bd8c-3eb70024e90e","name":"dev-journal","slug":"dev-journal","description":null,"image":null,"hidden":false,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-01-06T04:30:27.481Z","created_by":1,"updated_at":"2015-01-06T04:30:27.481Z","updated_by":1},{"id":10,"uuid":"d32eeacc-47a6-4c99-8aaa-5dba107f992c","name":"foss","slug":"foss","description":null,"image":null,"hidden":false,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-01-06T04:30:27.483Z","created_by":1,"updated_at":"2015-01-06T04:30:27.483Z","updated_by":1},{"id":11,"uuid":"66044062-eb22-4155-82ce-9c08ff07a474","name":"provisioning","slug":"provisioning","description":null,"image":null,"hidden":false,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-01-06T04:30:27.486Z","created_by":1,"updated_at":"2015-01-06T04:30:27.486Z","updated_by":1},{"id":12,"uuid":"de575bf3-efcb-412a-a603-f2a656ce7a45","name":"hhvm","slug":"hhvm","description":null,"image":null,"hidden":false,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-01-06T04:30:27.487Z","created_by":1,"updated_at":"2015-01-06T04:30:27.487Z","updated_by":1},{"id":13,"uuid":"812afcbb-16f5-4e92-98ce-48b1426e3c90","name":"integer overflow","slug":"integer-overflow","description":null,"image":null,"hidden":false,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-01-06T04:30:27.489Z","created_by":1,"updated_at":"2015-01-06T04:30:27.489Z","updated_by":1},{"id":14,"uuid":"e75d9dcc-17cb-4fce-93bb-322c25db062a","name":"int max","slug":"int-max","description":null,"image":null,"hidden":false,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-01-06T04:30:27.490Z","created_by":1,"updated_at":"2015-01-06T04:30:27.490Z","updated_by":1},{"id":15,"uuid":"e83bd918-2860-4634-bb0a-771ab331eb4a","name":"dotenv","slug":"dotenv","description":null,"image":null,"hidden":false,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-01-06T04:30:27.492Z","created_by":1,"updated_at":"2015-01-06T04:30:27.492Z","updated_by":1},{"id":16,"uuid":"9f73c9fd-1671-407f-8e38-a6a756c11249","name":"route","slug":"route","description":null,"image":null,"hidden":false,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-01-06T04:30:27.493Z","created_by":1,"updated_at":"2015-01-06T04:30:27.493Z","updated_by":1},{"id":17,"uuid":"24731b22-76d2-4292-bf9e-732f7da7064c","name":"sublime text","slug":"sublime-text","description":null,"image":null,"hidden":false,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-01-06T04:30:27.496Z","created_by":1,"updated_at":"2015-01-06T04:30:27.496Z","updated_by":1},{"id":18,"uuid":"5032f5c1-a143-465c-81a4-aac2f591b524","name":"snippet","slug":"snippet","description":null,"image":null,"hidden":false,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-01-06T04:30:27.497Z","created_by":1,"updated_at":"2015-01-06T04:30:27.497Z","updated_by":1},{"id":19,"uuid":"7a77518f-3eb8-413a-95c0-ce369fc6d523","name":"resource","slug":"resource","description":null,"image":null,"hidden":false,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-01-06T04:30:27.500Z","created_by":1,"updated_at":"2015-01-06T04:30:27.500Z","updated_by":1},{"id":20,"uuid":"985e7599-2527-4e40-85bb-9896c3c02404","name":"videos","slug":"videos","description":null,"image":null,"hidden":false,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-01-06T04:30:27.502Z","created_by":1,"updated_at":"2015-01-06T04:30:27.502Z","updated_by":1},{"id":21,"uuid":"71694c8f-f786-4fb3-808e-b4d01e9e31ca","name":"tech","slug":"tech","description":null,"image":null,"hidden":false,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-01-06T04:30:27.505Z","created_by":1,"updated_at":"2015-01-06T04:30:27.505Z","updated_by":1},{"id":22,"uuid":"3e9d039f-ca6d-4098-8873-b3da4125e5ca","name":"web-dev","slug":"web-dev","description":null,"image":null,"hidden":false,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-01-06T04:30:27.507Z","created_by":1,"updated_at":"2015-01-06T04:30:27.507Z","updated_by":1},{"id":23,"uuid":"cc5d77e8-976d-49b6-b6ce-1aa5e01679ec","name":"laracon","slug":"laracon","description":null,"image":null,"hidden":false,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-01-06T04:30:27.508Z","created_by":1,"updated_at":"2015-01-06T04:30:27.508Z","updated_by":1},{"id":24,"uuid":"e92ebcf7-64ac-44f5-82e9-b038f9e892bd","name":"nyc","slug":"nyc","description":null,"image":null,"hidden":false,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-01-06T04:30:27.510Z","created_by":1,"updated_at":"2015-01-06T04:30:27.510Z","updated_by":1},{"id":25,"uuid":"b6012674-dd9f-41fa-bb2a-6db582347988","name":"hackathon","slug":"hackathon","description":null,"image":null,"hidden":false,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-01-25T04:47:01.176Z","created_by":1,"updated_at":"2015-01-25T04:47:01.176Z","updated_by":1},{"id":26,"uuid":"a0b78692-52f7-4bb5-a4ff-639f0b33a34f","name":"front-end","slug":"front-end","description":null,"image":null,"hidden":false,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-01-25T04:47:01.177Z","created_by":1,"updated_at":"2015-01-25T04:47:01.177Z","updated_by":1},{"id":27,"uuid":"d1bec9ba-dbd9-4b1e-af60-8ec476fe52bf","name":"ember","slug":"ember","description":null,"image":null,"hidden":false,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-01-25T04:47:01.178Z","created_by":1,"updated_at":"2015-01-25T04:47:01.178Z","updated_by":1},{"id":28,"uuid":"7fc7bf35-bc41-4c66-9740-200ec781bd2e","name":"javascript","slug":"javascript","description":null,"image":null,"hidden":false,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-01-25T04:47:01.177Z","created_by":1,"updated_at":"2015-01-25T04:47:01.177Z","updated_by":1},{"id":29,"uuid":"0b7fd483-4d22-4a78-9354-0f60e3b7eb7c","name":"angular","slug":"angular","description":null,"image":null,"hidden":false,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-01-25T04:47:01.178Z","created_by":1,"updated_at":"2015-01-25T04:47:01.178Z","updated_by":1},{"id":30,"uuid":"e576f7e5-2d3f-47c0-b928-9c4e6f7cb689","name":"polymer","slug":"polymer","description":null,"image":null,"hidden":false,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-01-25T04:47:01.178Z","created_by":1,"updated_at":"2015-01-25T04:47:01.178Z","updated_by":1},{"id":31,"uuid":"7d73321e-d34c-4c36-a8b0-75d8a39e0ea3","name":"staticshowdown","slug":"staticshowdown","description":null,"image":null,"hidden":false,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":"2015-01-25T04:47:01.178Z","created_by":1,"updated_at":"2015-01-25T04:47:01.178Z","updated_by":1}],"app_fields":[],"app_settings":[],"users":[{"id":1,"uuid":"00831332-a583-45a6-9bec-04a09614079c","name":"Phil Betley","slug":"phil","password":"$2a$10$E0rLjQtKG2q0QLLKDjGF1uvUL5VyDXFwahNZuSeF7Ed.2xTqDNV4e","email":"jpbetley@gmail.com","image":"//www.gravatar.com/avatar/77d2932ba6f4d60454ef494914f0dd12?d=404&s=250","cover":null,"bio":null,"website":null,"location":null,"accessibility":null,"status":"active","language":"en_US","meta_title":null,"meta_description":null,"last_login":"2018-11-02T16:58:23.475Z","created_at":"2015-01-06T04:12:32.502Z","created_by":1,"updated_at":"2018-11-02T16:58:23.475Z","updated_by":1,"tour":null}]}}]}